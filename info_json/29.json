{
  "id": 29,
  "repo": "diem",
  "issue_url": "https://github.com/diem/diem/issues/5435",
  "pr_url": "https://github.com/diem/diem/pull/5470",
  "issue_description": "# \ud83d\udc1b Bug\r\n\r\nI have seen a few PRs fail with no code changes in `storage::command_adapter::tests::test_save_list_metadata_files`. Two runs are:\r\n- https://circleci.com/gh/libra/libra/167227\r\n- https://circleci.com/gh/libra/libra/166268\r\n",
  "files_changed": [
    {
      "filename": "storage/backup/backup-cli/src/storage/command_adapter/tests.rs",
      "status": "modified",
      "patch": "@@ -50,6 +50,7 @@ proptest! {\n         let tmpdir = TempPath::new();\n         let mut rt = Runtime::new().unwrap();\n \n-        rt.block_on(test_save_and_list_metadata_files_impl(get_store(&tmpdir), input));\n+        rt.block_on(test_save_and_list_metadata_files_impl(get_store(&tmpdir), input, &tmpdir.path().to_path_buf()));\n+\n     }\n }"
    },
    {
      "filename": "storage/backup/backup-cli/src/storage/local_fs/tests.rs",
      "status": "modified",
      "patch": "@@ -34,6 +34,6 @@ proptest! {\n         let store = LocalFs::new(tmpdir.path().to_path_buf());\n \n         let mut rt = Runtime::new().unwrap();\n-        rt.block_on(test_save_and_list_metadata_files_impl(Box::new(store), input));\n+        rt.block_on(test_save_and_list_metadata_files_impl(Box::new(store), input, &tmpdir.path().to_path_buf()));\n     }\n }"
    },
    {
      "filename": "storage/backup/backup-cli/src/storage/test_util.rs",
      "status": "modified",
      "patch": "@@ -9,8 +9,11 @@ use proptest::{\n     collection::{hash_map, vec},\n     prelude::*,\n };\n-use std::{collections::HashMap, process::Stdio};\n-use tokio::io::{AsyncReadExt, AsyncWriteExt};\n+use std::{collections::HashMap, path::PathBuf, process::Stdio};\n+use tokio::{\n+    io::{AsyncReadExt, AsyncWriteExt},\n+    time::{delay_for, Duration},\n+};\n \n fn to_file_name(tmpdir: &TempPath, backup_name: &str, file_name: &str) -> String {\n     tmpdir\n@@ -65,14 +68,15 @@ pub fn arb_backups(\n pub async fn test_save_and_list_metadata_files_impl(\n     store: Box<dyn BackupStorage>,\n     input: Vec<(ShellSafeName, TextLine)>,\n+    path: &PathBuf,\n ) {\n     for (name, content) in &input {\n         store.save_metadata_line(name, &content).await.unwrap();\n     }\n \n-    // It takes a little time for the ls command to reflect newly created entries if not synced.\n+    // It takes a little time for the ls command to reflect newly created entries.\n     // it's not a problem in real world.\n-    sync_fs().await;\n+    wait_for_dentries(path, input.len()).await;\n \n     let mut read_back = Vec::new();\n     for file_handle in store.list_metadata_files().await.unwrap() {\n@@ -107,7 +111,8 @@ pub fn arb_metadata_files() -> impl Strategy<Value = Vec<(ShellSafeName, TextLin\n     vec(any::<(ShellSafeName, TextLine)>(), 0..10)\n }\n \n-async fn sync_fs() {\n+async fn wait_for_dentries(path: &PathBuf, num_of_files: usize) {\n+    // sync\n     tokio::process::Command::new(\"sync\")\n         .stdin(Stdio::null())\n         .stdout(Stdio::null())\n@@ -116,4 +121,33 @@ async fn sync_fs() {\n         .unwrap()\n         .await\n         .unwrap();\n+\n+    // try every 10ms, for 10 seconds at most\n+    for n in 1..=1000usize {\n+        let output = tokio::process::Command::new(\"sh\")\n+            .arg(\"-c\")\n+            .arg(&format!(\n+                \"ls -1 {} || exec\",\n+                path.join(\"metadata\")\n+                    .into_os_string()\n+                    .into_string()\n+                    .unwrap()\n+            ))\n+            .stdin(Stdio::null())\n+            .output()\n+            .await\n+            .unwrap();\n+        let got_files = String::from_utf8(output.stdout).unwrap().lines().count();\n+        if got_files >= num_of_files {\n+            return;\n+        } else {\n+            println!(\n+                \"Got {} files on {}-th try, expecting {}.\",\n+                got_files, n, num_of_files\n+            );\n+        }\n+        delay_for(Duration::from_millis(10)).await;\n+    }\n+\n+    panic!(\"ls result never contained {} entries\", num_of_files);\n }"
    }
  ],
  "fix_category": "Wait/Join",
  "root_cause_category": "I/O",
  "root_cause_subcategory": "Temp Files"
}