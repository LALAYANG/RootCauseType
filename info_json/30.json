{
  "id": 30,
  "repo": "neon",
  "issue_url": "https://github.com/neondatabase/neon/issues/5759",
  "pr_url": "https://github.com/neondatabase/neon/pull/5762",
  "issue_description": "`test_startup` is flaky (sometimes it takes more than 15minutes)\r\n\r\n- https://neon-github-public-dev.s3.amazonaws.com/reports/main/6670256050/index.html#testresult/f5f31f3104d65441\r\n- https://neon-github-public-dev.s3.amazonaws.com/reports/main/6667780046/index.html#testresult/7849c721c84588ff\r\n- https://neon-github-public-dev.s3.amazonaws.com/reports/main/6667780046/index.html#testresult/5878e671d213bddd\r\n- https://neon-github-public-dev.s3.amazonaws.com/reports/main/6666669143/index.html#testresult/aa5af8ae8885eaef\r\n- https://neon-github-public-dev.s3.amazonaws.com/reports/main/6660174205/index.html#testresult/27a1b5fad22ab2e3\r\n- https://neon-github-public-dev.s3.amazonaws.com/reports/main/6658940773/index.html#testresult/46d27bacf050522a\r\n\r\nJohn mentioned\r\n> I looked at the pageserver log and it doesn't appear to be hanging: it's making it through timeline creation, and can see it flushing layers to disk.\r\n\r\nSee https://neondb.slack.com/archives/C033QLM5P7D/p1698663605117379?thread_ts=1698660749.751289&cid=C033QLM5P7D",
  "files_changed": [
    {
      "filename": "scripts/benchmark_durations.py",
      "status": "modified",
      "patch": "@@ -81,7 +81,6 @@\n     \"test_runner/performance/test_seqscans.py::test_seqscans[vanilla-100000-100-0]\": 0.55,\n     \"test_runner/performance/test_seqscans.py::test_seqscans[vanilla-10000000-1-0]\": 12.189,\n     \"test_runner/performance/test_seqscans.py::test_seqscans[vanilla-10000000-1-4]\": 13.899,\n-    \"test_runner/performance/test_startup.py::test_startup\": 890.114,\n     \"test_runner/performance/test_startup.py::test_startup_simple\": 2.51,\n     \"test_runner/performance/test_wal_backpressure.py::test_heavy_write_workload[neon_off-10-5-5]\": 527.245,\n     \"test_runner/performance/test_wal_backpressure.py::test_heavy_write_workload[neon_on-10-5-5]\": 583.46,"
    },
    {
      "filename": "test_runner/performance/test_startup.py",
      "status": "modified",
      "patch": "@@ -1,6 +1,3 @@\n-from contextlib import closing\n-\n-import pytest\n import requests\n from fixtures.benchmark_fixture import MetricReport, NeonBenchmarker\n from fixtures.neon_fixtures import NeonEnvBuilder\n@@ -81,49 +78,3 @@ def test_startup_simple(neon_env_builder: NeonEnvBuilder, zenbenchmark: NeonBenc\n \n         # Imitate optimizations that console would do for the second start\n         endpoint.respec(skip_pg_catalog_updates=True)\n-\n-\n-# This test sometimes runs for longer than the global 5 minute timeout.\n-@pytest.mark.timeout(900)\n-def test_startup(neon_env_builder: NeonEnvBuilder, zenbenchmark: NeonBenchmarker):\n-    neon_env_builder.num_safekeepers = 3\n-    env = neon_env_builder.init_start()\n-\n-    # Start\n-    env.neon_cli.create_branch(\"test_startup\")\n-    with zenbenchmark.record_duration(\"startup_time\"):\n-        endpoint = env.endpoints.create_start(\"test_startup\")\n-        endpoint.safe_psql(\"select 1;\")\n-\n-    # Restart\n-    endpoint.stop_and_destroy()\n-    with zenbenchmark.record_duration(\"restart_time\"):\n-        endpoint.create_start(\"test_startup\")\n-        endpoint.safe_psql(\"select 1;\")\n-\n-    # Fill up\n-    num_rows = 1000000  # 30 MB\n-    num_tables = 100\n-    with closing(endpoint.connect()) as conn:\n-        with conn.cursor() as cur:\n-            for i in range(num_tables):\n-                cur.execute(f\"create table t_{i} (i integer);\")\n-                cur.execute(f\"insert into t_{i} values (generate_series(1,{num_rows}));\")\n-\n-    # Read\n-    with zenbenchmark.record_duration(\"read_time\"):\n-        endpoint.safe_psql(\"select * from t_0;\")\n-\n-    # Read again\n-    with zenbenchmark.record_duration(\"second_read_time\"):\n-        endpoint.safe_psql(\"select * from t_0;\")\n-\n-    # Restart\n-    endpoint.stop_and_destroy()\n-    with zenbenchmark.record_duration(\"restart_with_data\"):\n-        endpoint.create_start(\"test_startup\")\n-        endpoint.safe_psql(\"select 1;\")\n-\n-    # Read\n-    with zenbenchmark.record_duration(\"read_after_restart\"):\n-        endpoint.safe_psql(\"select * from t_0;\")"
    }
  ],
  "fix_category": NaN,
  "root_cause_category": NaN,
  "root_cause_subcategory": "Removed"
}