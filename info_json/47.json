{
  "id": 47,
  "repo": "oak",
  "issue_url": "https://github.com/project-oak/oak/issues/1462",
  "pr_url": "https://github.com/project-oak/oak/pull/1469",
  "issue_description": "> Uhmm this seems to make the HTTP node tests fail sometimes, but not consistently. Not sure why, will look into it. @rbehjati let me know if you have any suggestions on why that may be happening\r\n\r\nso actually I tried again from `main`, and it seems that tests are flaky there too. To reproduce:\r\n\r\n```bash\r\nexport RUST_LOG=debug\r\ncd oak_runtime\r\ncargo test --package oak_runtime --lib -- node --nocapture\r\n```\r\n\r\nand then rerun the `cargo test` a few times. I got a failure roughtly 1 out of 5 times.\r\n\r\n<details><summary>logs</summary>\r\n<p>\r\n\r\n```\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.10s\r\n     Running target/debug/deps/oak_runtime-f41ce2eeb10d11e5\r\n\r\nrunning 19 tests\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http::tests] Create runtime for test\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 10859620126471780718 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 14154969170481411718 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 6028826501016594447 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 16096544177349775597 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((10859620126471780718, 14154969170481411718))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 16698263373585990938 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 9092960943208256323 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 244963718117020840 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((16096544177349775597, 9092960943208256323))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((16698263373585990938, 244963718117020840))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 2638176703059791071 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 15754702411688475858 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 16409535109310484427 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((6028826501016594447, 15754702411688475858))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 11927899315350453922 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 9360967439716317465 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((2638176703059791071, 16409535109310484427))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 11888636142326083607 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_other_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] entrypoint 'oak_main' export not found\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] could not validate entrypoint: ErrInvalidArgs\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((11927899315350453922, 11888636142326083607))\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] could not create node: IncorrectWebAssemblyModuleName\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 10552541542430126522 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 1\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] }) -> Err(ErrInvalidArgs)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 12335443945007934671 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 15583588925823706518 maps to Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 2196097866962909478 maps to Channel 1 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((10552541542430126522, 12335443945007934671))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 1767916906041923217 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 1\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 3120311075007141291 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((15583588925823706518, 2196097866962909478))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 1291357445641949921 maps to Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 9571224628934017081 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 1\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(11927899315350453922, Message { bytes: [10, 9, 9, 150, 229, 110, 9, 144, 7, 68, 216], handles: [15583588925823706518] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(15754702411688475858)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((3120311075007141291, 9571224628934017081))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 3555956587273005122 maps to Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(11927899315350453922, ...) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(15754702411688475858) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 6330247248751785548 maps to Channel 1 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(11927899315350453922)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 14923236747254485945 maps to Channel 1 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((3555956587273005122, 14923236747254485945))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 6028826501016594447 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(2638176703059791071, Message { bytes: [10, 9, 9, 66, 40, 30, 5, 173, 75, 89, 49], handles: [3555956587273005122] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 6028826501016594447 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((1291357445641949921, 6330247248751785548))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(2638176703059791071, ...) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(11927899315350453922) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(10552541542430126522, Message { bytes: [10, 9, 9, 225, 82, 139, 65, 193, 210, 235, 17], handles: [1291357445641949921] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(2638176703059791071)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(10552541542430126522, ...) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(2638176703059791071) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(10552541542430126522)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\ntest node::wasm::tests::wasm_starting_module_without_content_fails ... ok\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(10552541542430126522) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 580815582432483639 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((1767916906041923217, 580815582432483639))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): wait_on_channels: channels not ready, parking thread Thread { id: ThreadId(16), name: None }\r\n[2020-09-10T20:47:15Z DEBUG rustls::anchors] add_pem_file processed 1 valid and 0 invalid certs\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create runtime for test\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 9155368652591746135 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG rustls::anchors] add_pem_file processed 1 valid and 0 invalid certs\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] test-node: Waiting for invocation channel\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1)\r\n[2020-09-10T20:47:15Z DEBUG rustls::anchors] add_pem_file processed 1 valid and 0 invalid certs\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): wait_on_channels: channels not ready, parking thread Thread { id: ThreadId(19), name: None }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1) -> Ok([ReadReady])\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(12335443945007934671)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((9360967439716317465, 9155368652591746135))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 11080559098524874464 maps to Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::dns] resolving host=\"localhost\"\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(12335443945007934671) -> Ok(Some(Message { bytes: [10, 9, 9, 225, 82, 139, 65, 193, 210, 235, 17], handles: [11080559098524874464] }))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(12335443945007934671)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(12335443945007934671) -> Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] test-node: Starting HTTP server pseudo-Node on: [::]:2527\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::http] connecting to [::1]:2527\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::dns] resolving host=\"localhost\"\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::dns] resolving host=\"localhost\"\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::http] connected to [::1]:2527\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] ThreadId(18): Started HTTP server pseudo-node on port 2527\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::hs] No cached session for DNSNameRef(\"localhost\")\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::hs] Not resuming any session\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::http] Received incoming TLS stream: TcpStream { addr: V6([::1]:2527), peer: V6([::1]:33922), fd: 21 }\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::http] connecting to [::1]:2525\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create test Node\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Start test Node instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] test-node: Waiting for invocation channel\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::http] connecting to 127.0.0.1:2525\r\nthread 'node::http::tests::test_https_server_can_serve_https_requests' panicked at 'assertion failed: resp.is_ok()', src/node/http/tests.rs:91[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1) -> Ok([ReadReady])\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(11888636142326083607)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 15642419903814064830 maps to Channel 1 WRITE\r\n:5\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\ntest node::http::tests::test_https_server_can_serve_https_requests ... FAILED\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(11888636142326083607) -> Ok(Some(Message { bytes: [10, 9, 9, 150, 229, 110, 9, 144, 7, 68, 216], handles: [15642419903814064830] }))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(11888636142326083607)\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] test-node: Waiting for invocation channel\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }, Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [2, 2, 2] })) }], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(11888636142326083607) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::http] connecting to [::1]:2526\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] NodeId(1): cannot write to Label { confidentiality_tags: [], integrity_tags: [] }\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] test-node: Starting HTTP server pseudo-Node on: [::]:2526\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::http] connecting to 127.0.0.1:2526\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }, Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [2, 2, 2] })) }], integrity_tags: [] }) -> Err(ErrPermissionDenied)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): remove_node_id() found open handles on exit: []\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::http] connected to 127.0.0.1:2526\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] ThreadId(14): Started HTTP server pseudo-node on port 2526\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\ntest tests::create_channel_with_more_confidential_label_from_non_public_node_with_privilege_err ... ok\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create runtime for test\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::http] Received incoming TLS stream: TcpStream { addr: V6([::ffff:127.0.0.1]:2526), peer: V6([::ffff:127.0.0.1]:33940), fd: 22 }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 11705927381946070715 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 490605741076439707 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 5932870466176810717 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 13595452974177765549 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG rustls::server::hs] decided upon suite SupportedCipherSuite { suite: TLS13_CHACHA20_POLY1305_SHA256, kx: BulkOnly, bulk: CHACHA20_POLY1305, hash: SHA256, sign: None, enc_key_len: 32, fixed_iv_len: 12, explicit_nonce_len: 0 }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((11705927381946070715, 13595452974177765549))\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::io] flushed 57 bytes\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create runtime for test\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((490605741076439707, 5932870466176810717))\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::node::http] Client-connection error: Custom { kind: InvalidData, error: CorruptMessage }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::node::http] Error when processing TLS stream: Custom { kind: Other, error: \"TLS Error: Custom { kind: InvalidData, error: CorruptMessage }\" }\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create test Node\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Start test Node instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1) -> Ok([ReadReady])\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(16409535109310484427)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::io] read 0 bytes\r\n[2020-09-10T20:47:15Z ERROR oak_runtime] Wasm module signature verification failed for oak_module: ring::error::Unspecified\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 10709409905608189541 maps to Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::conn] parse error (connection closed before message completed) with 0 bytes\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::dispatch] read_head error: connection closed before message completed\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(16409535109310484427) -> Ok(Some(Message { bytes: [10, 9, 9, 66, 40, 30, 5, 173, 75, 89, 49], handles: [10709409905608189541] }))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 13595452974177765549 => Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 11705927381946070715 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(16409535109310484427)\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG hyper::server::shutdown] signal received, starting graceful shutdown\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(16409535109310484427) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] HTTP server pseudo-node terminated with Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] test-node: Starting HTTP server pseudo-Node on: [::]:2525\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\ntest node::wasm::tests::wasm_verify_module_signature_fails ... [2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\nok[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 15583588925823706518 => Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 2196097866962909478 => Channel 1 READ\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] ThreadId(15): Started HTTP server pseudo-node on port 2525\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 15642419903814064830 => Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG hyper::server::shutdown] signal received, starting graceful shutdown\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] HTTP server pseudo-node terminated with Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 15583588925823706518 => Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 2196097866962909478 => Channel 1 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): new ABI handle 8188998132612729810 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 15642419903814064830 => Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): new ABI handle 5748044951194180441 maps to Channel 0 READ\r\n\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] }) -> Ok((8188998132612729810, 5748044951194180441))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 1 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_write(8188998132612729810, Message { bytes: [14, 12, 88], handles: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=1, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_write(8188998132612729810, ...) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_read(5748044951194180441)\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=1, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): cannot read from Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_read(5748044951194180441) -> Err(ErrPermissionDenied)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): remove_node_id() found open handles on exit: [8188998132612729810, 5748044951194180441]\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::hs] Using ciphersuite TLS13_CHACHA20_POLY1305_SHA256\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\ntest node::http::tests::test_https_server_cannot_serve_http_requests ... ok\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create runtime for test\r\ntest tests::create_channel_with_more_confidential_label_from_public_untrusted_node_ok ... ok\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::tls13] Not resuming\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create runtime for test\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::tls13] TLS1.3 encrypted extensions: [ServerNameAck]\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::hs] ALPN protocol is None\r\n[2020-09-10T20:47:15Z WARN  rustls::session] Sending fatal alert BadCertificate\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::node::http] Client-connection error: Custom { kind: UnexpectedEof, error: \"tls handshake eof\" }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::node::http] Error when processing TLS stream: Custom { kind: Other, error: \"TLS Error: Custom { kind: UnexpectedEof, error: \\\"tls handshake eof\\\" }\" }\r\n[2020-09-10T20:47:15Z DEBUG rustls::anchors] add_pem_file processed 1 valid and 0 invalid certs\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create test Node\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::dns] resolving host=\"localhost\"\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create test Node\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Start test Node instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create test Node\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::http] connecting to [::1]:2527\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Start test Node instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::http] Received incoming TLS stream: TcpStream { addr: V6([::1]:2527), peer: V6([::1]:33932), fd: 5 }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::connect::http] connected to [::1]:2527\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] NodeId(1): cannot write to Label { confidentiality_tags: [], integrity_tags: [] }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] }) -> Err(ErrPermissionDenied)\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::hs] No cached session for DNSNameRef(\"localhost\")\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::hs] Not resuming any session\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): remove_node_id() found open handles on exit: []\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] NodeId(1): cannot write to Label { confidentiality_tags: [], integrity_tags: [] }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Start test Node instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] }) -> Err(ErrPermissionDenied)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): remove_node_id() found open handles on exit: []\r\ntest tests::create_node_more_confidential_label_ok ... ok\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create runtime for test\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\ntest tests::create_node_invalid_configuration_err ... ok\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 0\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): new ABI handle 1052340951842084367 maps to Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): new ABI handle 279083569327136254 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] }) -> Ok((1052340951842084367, 279083569327136254))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_write(1052340951842084367, Message { bytes: [14, 12, 88], handles: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_write(1052340951842084367, ...) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_read(279083569327136254)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_read(279083569327136254) -> Ok(Some(Message { bytes: [14, 12, 88], handles: [] }))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): remove_node_id() found open handles on exit: [279083569327136254, 1052340951842084367]\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG rustls::server::hs] decided upon suite SupportedCipherSuite { suite: TLS13_CHACHA20_POLY1305_SHA256, kx: BulkOnly, bulk: CHACHA20_POLY1305, hash: SHA256, sign: None, enc_key_len: 32, fixed_iv_len: 12, explicit_nonce_len: 0 }\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create test Node\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Start test Node instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] NodeId(1): cannot write to Label { confidentiality_tags: [], integrity_tags: [] }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] }) -> Err(ErrPermissionDenied)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): remove_node_id() found open handles on exit: []\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\ntest tests::create_channel_with_more_confidential_label_from_public_node_with_privilege_ok ... ok\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\ntest tests::create_node_less_confidential_label_err ... ok\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create runtime for test\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Create test Node\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::hs] Using ciphersuite TLS13_CHACHA20_POLY1305_SHA256\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Start test Node instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] NodeId(1): cannot write to Label { confidentiality_tags: [], integrity_tags: [] }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(1): channel_create(Label { confidentiality_tags: [Tag { tag: Some(GrpcTag(GrpcTag { authorization_bearer_token_hmac: [1, 1, 1] })) }], integrity_tags: [] }) -> Err(ErrPermissionDenied)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): remove_node_id() found open handles on exit: []\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::tls13] Not resuming\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node TestNode(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::tests] Stop runtime..done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\ntest tests::create_node_same_label_ok ... ok\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::tls13] TLS1.3 encrypted extensions: [ServerNameAck]\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::hs] ALPN protocol is None\r\n[2020-09-10T20:47:15Z DEBUG rustls::client::tls13] Ticket saved\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::io] flushed 57 bytes\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::io] read 57 bytes\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::io] parsed 2 headers\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::conn] incoming body is empty\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] Handling HTTP request; request size: 0 bytes, label: Label { confidentiality_tags: [], integrity_tags: [] }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::http] Inject the request into the Oak Node\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 2\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 9961052006950199576 maps to Channel 2 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 1791300487480186213 maps to Channel 2 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((9961052006950199576, 1791300487480186213))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] create new Channel object with ID 3\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 14881253896451425314 maps to Channel 3 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 3680328595663417379 maps to Channel 3 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_create(Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok((14881253896451425314, 3680328595663417379))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(9961052006950199576, Message { bytes: [10, 1, 47, 18, 3, 103, 101, 116, 34, 15, 10, 13, 111, 97, 107, 45, 108, 97, 98, 101, 108, 45, 98, 105, 110, 34, 22, 10, 4, 104, 111, 115, 116, 18, 14, 108, 111, 99, 97, 108, 104, 111, 115, 116, 58, 50, 53, 50, 55], handles: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(9961052006950199576, ...) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(11080559098524874464, Message { bytes: [10, 9, 9, 101, 149, 61, 122, 77, 250, 219, 24, 18, 9, 9, 34, 132, 98, 22, 147, 213, 132, 206], handles: [1791300487480186213, 14881253896451425314] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(11080559098524874464, ...) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): wait_on_channels: thread Thread { id: ThreadId(19), name: None } re-woken\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(9961052006950199576)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 2 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(9961052006950199576) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(1791300487480186213)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1) -> Ok([ReadReady])\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(6330247248751785548)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(1791300487480186213) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(14881253896451425314)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 7424337281389512419 maps to Channel 2 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(0): new ABI handle 12021382004607466382 maps to Channel 3 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(6330247248751785548) -> Ok(Some(Message { bytes: [10, 9, 9, 101, 149, 61, 122, 77, 250, 219, 24, 18, 9, 9, 34, 132, 98, 22, 147, 213, 132, 206], handles: [7424337281389512419, 12021382004607466382] }))\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(12021382004607466382, Message { bytes: [16, 200, 1], handles: [] })\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_write(12021382004607466382, ...) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(14881253896451425314) -> Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] Generating response for runtime 0 and reader 3680328595663417379.\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): wait_on_channels(count=1) -> Ok([ReadReady])\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(3680328595663417379)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_read(3680328595663417379) -> Ok(Some(Message { bytes: [16, 200, 1], handles: [] }))\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::io] flushed 75 bytes\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::io] read 75 bytes\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::io] parsed 2 headers\r\n[2020-09-10T20:47:15Z DEBUG hyper::proto::h1::conn] incoming body is empty\r\n[2020-09-10T20:47:15Z DEBUG hyper::client::pool] pooling idle connection for (\"https\", localhost:2527)\r\n[2020-09-10T20:47:15Z DEBUG hyper::server::shutdown] signal received, starting graceful shutdown\r\n[2020-09-10T20:47:15Z DEBUG rustls::session] Sending warning alert CloseNotify\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::http] HTTP server pseudo-node terminated with Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 7424337281389512419 => Channel 2 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 12021382004607466382 => Channel 3 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 3680328595663417379 => Channel 3 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 1291357445641949921 => Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 6330247248751785548 => Channel 1 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 11080559098524874464 => Channel 1 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 7424337281389512419 => Channel 2 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 12021382004607466382 => Channel 3 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 3680328595663417379 => Channel 3 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 1291357445641949921 => Channel 1 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 6330247248751785548 => Channel 1 READ\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 11080559098524874464 => Channel 1 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=2, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=2, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 3 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=3, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=3, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 1 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=1, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=1, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\ntest node::http::tests::test_https_server_does_not_terminate_after_a_bad_request ... ok\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] entrypoint 'oak_main' export has incorrect function signature: Signature { params: [], return_type: None }\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] could not validate entrypoint: ErrInvalidArgs\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] could not create node: IncorrectWebAssemblyModuleName\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] }) -> Err(ErrInvalidArgs)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(9571224628934017081)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(9571224628934017081) -> Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 3120311075007141291 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 3120311075007141291 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\ntest node::wasm::tests::wasm_starting_module_with_wrong_signature_2_fails ... ok\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] entrypoint 'oak_main' export has incorrect function signature: Signature { params: [I64, I32, I32, I32, I32, I32, I32], return_type: Some(I32) }\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] could not validate entrypoint: ErrInvalidArgs\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] could not create node: IncorrectWebAssemblyModuleName\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] }) -> Err(ErrInvalidArgs)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(9155368652591746135)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(9155368652591746135) -> Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 9360967439716317465 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 9360967439716317465 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\ntest node::wasm::tests::wasm_starting_module_with_wrong_signature_fails ... ok\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::wasm] entrypoint 'oak_main' export validated\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::wasm] Wasm module SHA-256 hash: [26, 161, 141, 245, 243, 77, 146, 104, 219, 10, 136, 14, 100, 21, 76, 8, 240, 205, 105, 95, 72, 171, 239, 72, 123, 153, 124, 126, 132, 34, 230, 115]\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): new ABI handle 4251925570913386371 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] NodeId(0): start node instance NodeId(1) with privilege NodePrivilege { can_declassify_confidentiality_tags: {Tag { tag: Some(WebAssemblyModuleTag(WebAssemblyModuleTag { web_assembly_module_hash_sha_256: [26, 161, 141, 245, 243, 77, 146, 104, 219, 10, 136, 14, 100, 21, 76, 8, 240, 205, 105, 95, 72, 171, 239, 72, 123, 153, 124, 126, 132, 34, 230, 115] })) }}, can_endorse_integrity_tags: {Tag { tag: Some(WebAssemblyModuleTag(WebAssemblyModuleTag { web_assembly_module_hash_sha_256: [26, 161, 141, 245, 243, 77, 146, 104, 219, 10, 136, 14, 100, 21, 76, 8, 240, 205, 105, 95, 72, 171, 239, 72, 123, 153, 124, 126, 132, 34, 230, 115] })) }} }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(5932870466176810717)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::wasm] test: running entrypoint 'oak_main'\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(5932870466176810717) -> Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 490605741076439707 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(1) handle 4251925570913386371 => Channel 0 READ\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping node NodeId(1) ...\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node test(1)...\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] entrypoint 'oak_main' export not found\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] entrypoint 'oak_other_main' export not found\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] could not validate entrypoint: ErrInvalidArgs\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] could not create node: IncorrectWebAssemblyModuleName\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] could not validate entrypoint: ErrInvalidArgs\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] }) -> Err(ErrInvalidArgs)\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] could not create node: IncorrectWebAssemblyModuleName\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(244963718117020840)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_other_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] }) -> Err(ErrInvalidArgs)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(244963718117020840) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(9092960943208256323)\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(9092960943208256323) -> Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 16698263373585990938 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime::node::wasm] entrypoint 'oak_main' export validated\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 16096544177349775597 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 16698263373585990938 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 16096544177349775597 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::wasm] Wasm module SHA-256 hash: [26, 161, 141, 245, 243, 77, 146, 104, 219, 10, 136, 14, 100, 21, 76, 8, 240, 205, 105, 95, 72, 171, 239, 72, 123, 153, 124, 126, 132, 34, 230, 115]\r\ntest node::wasm::tests::wasm_starting_module_missing_an_export_fails ... ok\r\ntest node::wasm::tests::wasm_starting_module_with_wrong_export_fails ... ok\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): new ABI handle 5475638980536319391 maps to Channel 0 READ\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] NodeId(0): start node instance NodeId(1) with privilege NodePrivilege { can_declassify_confidentiality_tags: {Tag { tag: Some(WebAssemblyModuleTag(WebAssemblyModuleTag { web_assembly_module_hash_sha_256: [26, 161, 141, 245, 243, 77, 146, 104, 219, 10, 136, 14, 100, 21, 76, 8, 240, 205, 105, 95, 72, 171, 239, 72, 123, 153, 124, 126, 132, 34, 230, 115] })) }}, can_endorse_integrity_tags: {Tag { tag: Some(WebAssemblyModuleTag(WebAssemblyModuleTag { web_assembly_module_hash_sha_256: [26, 161, 141, 245, 243, 77, 146, 104, 219, 10, 136, 14, 100, 21, 76, 8, 240, 205, 105, 95, 72, 171, 239, 72, 123, 153, 124, 126, 132, 34, 230, 115] })) }} }\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::wasm] test: running entrypoint 'oak_main'\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] }) -> Ok(())\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(14154969170481411718)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(14154969170481411718) -> Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 10859620126471780718 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(1) handle 5475638980536319391 => Channel 0 READ\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping node NodeId(1) ...\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node test(1)...\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] entrypoint 'oak_main' export has incorrect function signature: Signature { params: [I64], return_type: Some(I32) }\r\n[2020-09-10T20:47:15Z WARN  oak_runtime::node::wasm] could not validate entrypoint: ErrInvalidArgs\r\n[2020-09-10T20:47:15Z WARN  oak_runtime] could not create node: IncorrectWebAssemblyModuleName\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): node_create(NodeConfiguration { name: \"test\", config_type: Some(WasmConfig(WebAssemblyConfiguration { wasm_module_name: \"oak_module\", wasm_entrypoint_name: \"oak_main\" })) }, Label { confidentiality_tags: [], integrity_tags: [] }) -> Err(ErrInvalidArgs)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(580815582432483639)\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::proxy] NodeId(0): channel_close(580815582432483639) -> Ok(())\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 1767916906041923217 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 1767916906041923217 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\ntest node::wasm::tests::wasm_starting_module_with_wrong_signature_3_fails ... ok\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::wasm] test: entrypoint 'oak_main' completed\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): remove_node_id() found open handles on exit: [4251925570913386371]\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node test(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping node NodeId(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 490605741076439707 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\ntest node::wasm::tests::wasm_verify_module_signature_succeeds ... ok\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::node::wasm] test: entrypoint 'oak_main' completed\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] NodeId(1): remove_node_id() found open handles on exit: [5475638980536319391]\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] join thread for node test(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping node NodeId(1)...done\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] stopping runtime instance\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime] waking waiters on NodeId(0) handle 10859620126471780718 => Channel 0 WRITE\r\n[2020-09-10T20:47:15Z INFO  oak_runtime] Runtime instance dropped\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] last writer for channel 0 gone, wake waiters\r\n[2020-09-10T20:47:15Z DEBUG oak_runtime::channel] dropping Channel object Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\n[2020-09-10T20:47:15Z ERROR oak_runtime::channel] Couldn't send ChannelDestroyed event, since the runtime has been dropped. Channel { id=0, #readers=0, #writers=0, label=Label { confidentiality_tags: [], integrity_tags: [] } }\r\ntest node::wasm::tests::wasm_starting_minimal_module_succeeds ... ok\r\n\r\n```\r\n\r\n</p>\r\n</summary>\r\n\r\n_Originally posted by @tiziano88 in https://github.com/project-oak/oak/pull/1461#issuecomment-690563634_",
  "files_changed": [
    {
      "filename": "oak_runtime/src/node/http/tests.rs",
      "status": "modified",
      "patch": "@@ -30,7 +30,11 @@ struct HttpServerTester {\n }\n \n impl HttpServerTester {\n-    fn new(port: u32, with_simulator_thread: bool) -> HttpServerTester {\n+    /// Create a new runtime and test server.\n+    /// port: The port on which the server is started\n+    /// number_of_requests: the number of requests the server expects to receive. This parameter is\n+    /// passed to `oak_node_simulator` to set up the Oak node that servers the requests.\n+    fn new(port: u32, number_of_requests: i32) -> HttpServerTester {\n         let runtime = create_runtime();\n         let server_node = create_server_node(port);\n         let (init_receiver, invocation_receiver) = create_communication_channel(&runtime);\n@@ -45,14 +49,10 @@ impl HttpServerTester {\n \n         // Simulate an Oak node that responds with 200 (OK) to every request it receives\n         // TODO(#1186): Use tokio instead of spawning a thread.\n-        let oak_node_simulator_thread = if with_simulator_thread {\n-            let runtime_proxy = runtime.clone();\n-            Some(std::thread::spawn(move || {\n-                oak_node_simulator(&runtime_proxy, invocation_receiver);\n-            }))\n-        } else {\n-            None\n-        };\n+        let runtime_proxy = runtime.clone();\n+        let oak_node_simulator_thread = Some(std::thread::spawn(move || {\n+            oak_node_simulator(number_of_requests, &runtime_proxy, invocation_receiver);\n+        }));\n \n         HttpServerTester {\n             runtime,\n@@ -80,14 +80,24 @@ impl HttpServerTester {\n     }\n }\n \n+fn init_logger() {\n+    // Ignore the result. We don't want to panic if the logger cannot be initialized, or is being\n+    // initialized more than once. Also, if the logger is not initialized, we cannot log an\n+    // error!\n+    let _res = env_logger::builder().is_test(true).try_init();\n+}\n+\n #[tokio::test]\n async fn test_https_server_can_serve_https_requests() {\n+    init_logger();\n+\n     // Start a runtime with an HTTP server node, and a thread simulating an Oak node to respond to\n     // HTTP requests.\n-    let mut http_server_tester = HttpServerTester::new(2525, true);\n+    let mut http_server_tester = HttpServerTester::new(2525, 1);\n+    let client_with_valid_tls = create_client(LOCAL_CA);\n \n     // Send an HTTPS request, and check that response has StatusCode::OK\n-    let resp = send_request(\"https://localhost:2525\", LOCAL_CA).await;\n+    let resp = send_request(client_with_valid_tls, \"https://localhost:2525\").await;\n     assert!(resp.is_ok());\n     assert_eq!(\n         resp.unwrap().status(),\n@@ -100,14 +110,17 @@ async fn test_https_server_can_serve_https_requests() {\n \n #[tokio::test]\n async fn test_https_server_cannot_serve_http_requests() {\n+    init_logger();\n+\n     // Start a runtime with an HTTP server node. The HTTP server in this case rejects the requests,\n     // and would not send anything to the Oak node. Creating a thread to simulate the Oak node will\n     // result in the thread being blocked for ever. So, we set up the test without an\n     // oak-node-simulator thread.\n-    let mut http_server_tester = HttpServerTester::new(2526, false);\n+    let mut http_server_tester = HttpServerTester::new(2526, 0);\n+    let client_with_valid_tls = create_client(LOCAL_CA);\n \n     // Send an HTTP request, and check that the server responds with an error\n-    let resp = send_request(\"http://localhost:2526\", LOCAL_CA).await;\n+    let resp = send_request(client_with_valid_tls, \"http://localhost:2526\").await;\n     assert!(resp.is_err());\n \n     // Stop the runtime and the servers\n@@ -116,14 +129,25 @@ async fn test_https_server_cannot_serve_http_requests() {\n \n #[tokio::test]\n async fn test_https_server_does_not_terminate_after_a_bad_request() {\n-    let mut http_server_tester = HttpServerTester::new(2527, true);\n+    init_logger();\n+\n+    // Start a runtime with an HTTP server node, and a thread simulating an Oak node to respond to\n+    // HTTP requests.\n+    let mut http_server_tester = HttpServerTester::new(2527, 2);\n+    let client_with_valid_tls = create_client(LOCAL_CA);\n+    let client_with_invalid_tls = create_client(GCP_CA);\n+\n+    // Send a valid request, making sure that the server is started\n+    let resp = send_request(client_with_valid_tls.clone(), \"https://localhost:2527\").await;\n+    assert!(resp.is_ok());\n \n     // Send an HTTPS request with invalid certificate, and check that the server responds with error\n-    let resp = send_request(\"https://localhost:2527\", GCP_CA).await;\n+    let resp = send_request(client_with_invalid_tls, \"https://localhost:2527\").await;\n     assert!(resp.is_err());\n \n-    // Send a second request, and check that the server is alive and responsive\n-    let resp = send_request(\"https://localhost:2527\", LOCAL_CA).await;\n+    // Send another valid request, and check that the server is alive and responsive\n+    // let client_with_valid_tls = create_client(LOCAL_CA);\n+    let resp = send_request(client_with_valid_tls, \"https://localhost:2527\").await;\n     assert!(resp.is_ok());\n \n     // Stop the runtime and the servers\n@@ -197,35 +221,40 @@ fn create_communication_channel(runtime: &RuntimeProxy) -> (oak_abi::Handle, oak\n     (init_receiver, invocation_receiver)\n }\n \n-fn oak_node_simulator(runtime: &RuntimeProxy, invocation_receiver: oak_abi::Handle) {\n+// Simulate an Oak node that responds to the specified number of requests. Since the Oak node blocks\n+// until a new request is received, we need to know the number of requests that the test sends\n+// beforehand. Alternatively, the node simulator could listen for incoming requests in an infinite\n+// loop and have a termination mechanism that could be signalled from outside. However, specifying\n+// the exact number of expected requests is more appropriate for testing purposes.\n+fn oak_node_simulator(\n+    number_of_requests: i32,\n+    runtime: &RuntimeProxy,\n+    invocation_receiver: oak_abi::Handle,\n+) {\n     // Get invocation message that contains the response_writer handle.\n     let invocation_receiver = Receiver::<HttpInvocation>::new(ReadHandle {\n         handle: invocation_receiver,\n     });\n-    let invocation = invocation_receiver.receive(runtime).unwrap();\n-    let resp = HttpResponse {\n-        body: vec![],\n-        status: http::status::StatusCode::OK.as_u16() as i32,\n-        headers: hashmap! {},\n-    };\n-    invocation\n-        .sender\n-        .expect(\"Empty sender on invocation.\")\n-        .send(resp, runtime)\n-        .unwrap();\n-}\n \n-async fn send_request(\n-    uri: &str,\n-    ca_path: &str,\n-) -> Result<http::response::Response<hyper::Body>, hyper::Error> {\n-    // Send a request, and wait for the response\n-    let label = oak_abi::label::Label::public_untrusted();\n-    let mut label_bytes = vec![];\n-    if let Err(err) = label.encode(&mut label_bytes) {\n-        panic!(\"Failed to encode label: {}\", err);\n+    for _counter in 0..number_of_requests {\n+        let invocation = invocation_receiver.receive(runtime).unwrap();\n+        let resp = HttpResponse {\n+            body: vec![],\n+            status: http::status::StatusCode::OK.as_u16() as i32,\n+            headers: hashmap! {},\n+        };\n+        invocation\n+            .sender\n+            .expect(\"Empty sender on invocation.\")\n+            .send(resp, runtime)\n+            .unwrap();\n     }\n+}\n \n+// Build a TLS client, using the given CA store\n+fn create_client(\n+    ca_path: &str,\n+) -> hyper::client::Client<hyper_rustls::HttpsConnector<hyper::client::HttpConnector>> {\n     let ca_file =\n         fs::File::open(ca_path).unwrap_or_else(|e| panic!(\"failed to open {}: {}\", ca_path, e));\n     let mut ca = io::BufReader::new(ca_file);\n@@ -241,15 +270,47 @@ async fn send_request(\n     // Join the above part into an HTTPS connector.\n     let https = hyper_rustls::HttpsConnector::from((http, tls));\n \n-    let client: hyper::client::Client<_, hyper::Body> =\n-        hyper::client::Client::builder().build(https);\n+    hyper::client::Client::builder().build(https)\n+}\n \n-    let request = hyper::Request::builder()\n-        .method(http::Method::GET)\n-        .uri(uri)\n-        .header(oak_abi::OAK_LABEL_HTTP_PROTOBUF_KEY, label_bytes)\n-        .body(hyper::Body::empty())\n-        .unwrap();\n+async fn send_request(\n+    client: hyper::client::Client<hyper_rustls::HttpsConnector<hyper::client::HttpConnector>>,\n+    uri: &str,\n+) -> Result<http::response::Response<hyper::Body>, hyper::Error> {\n+    // Send a request, and wait for the response\n+    let label = oak_abi::label::Label::public_untrusted();\n+    let mut label_bytes = vec![];\n+    if let Err(err) = label.encode(&mut label_bytes) {\n+        panic!(\"Failed to encode label: {}\", err);\n+    }\n \n-    client.request(request).await\n+    // The client thread may start sending the requests before the server is up. In this case, the\n+    // request will be rejected with a \"ConnectError\". To make the tests are stable, we need to\n+    // retry sending the requests until the server is up. To distinguish between these cases and\n+    // actual errors (e.g., errors due to invalid TLS certificates), we need to check the cause of\n+    // the error.\n+    loop {\n+        let request = hyper::Request::builder()\n+            .method(http::Method::GET)\n+            .uri(uri)\n+            .header(oak_abi::OAK_LABEL_HTTP_PROTOBUF_KEY, label_bytes.clone())\n+            .body(hyper::Body::empty())\n+            .unwrap();\n+\n+        match client.request(request).await {\n+            Ok(reps) => return Ok(reps),\n+            Err(error) => {\n+                // We cannot access the cause of the error, so we need to check the string instead.\n+                let error_str = format!(\"{:?}\", error);\n+                // If the cause is `ConnectError` (https://github.com/hyperium/hyper/blob/66fc127c8d4f81aed9300c9d0f13246b8206067a/src/client/connect/http.rs#L392)\n+                // it means that a connection to the server cannot be made. Retry sending the\n+                // request in this case.\n+                if error_str.contains(\"ConnectError\") {\n+                    continue;\n+                } else {\n+                    return Err(error);\n+                }\n+            }\n+        }\n+    }\n }"
    }
  ],
  "fix_category": "Retry request",
  "root_cause_category": "Concurrency",
  "root_cause_subcategory": "Retry"
}