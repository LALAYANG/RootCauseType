{
  "id": 53,
  "repo": "deltachat-core-rust",
  "issue_url": "https://github.com/deltachat/deltachat-core-rust/issues/4212",
  "pr_url": "https://github.com/deltachat/deltachat-core-rust/pull/4226",
  "issue_description": "Python tests that involve `.wait_for_seen()` on direct IMAP connection are very flaky. At least the following tests I have seen failing with a timeout in a `.wait_for_seen()` call:\r\n- [x] `test_one_account_send_bcc_setting` (#4215)\r\n- [x] `test_mdn_asymmetric` (#4226)\r\n- [x] `test_markseen_message_and_mdn` (#4226)\r\n- [x] `test_fetch_existing_msgs_group_and_single` (#4226)\r\n- [x] `test_send_and_receive_message_markseen` (#4226)\r\n- [x] `test_fetch_existing` (#4226)\r\n\r\nI do not know the reason why these tests are now extremely flaky on GitHub Actions. It may be due to Mailcow instance update and Dovecot behavior change or due to changes in GitHub Actions runners and the timing. In any case, it is a failure on our side.\r\n\r\nThe failure typically looks like this (this one is from `test_markseen_message_and_mdn`):\r\n```\r\n2023-03-22T22:21:35.9092151Z 43.37 [events-ac1] INFO src/imap/idle.rs:59: DeltaChat: Idle entering wait-on-remote state                                                          \r\n2023-03-22T22:21:35.9094676Z 43.51 [events-ac1] INFO src/imap.rs:1131: Marked messages 1 in folder DeltaChat as seen.\r\n2023-03-22T22:21:35.9094939Z 43.63 [events-ac1] INFO src/imap.rs:720: No new emails in folder INBOX\r\n2023-03-22T22:21:35.9095157Z 43.76 [events-ac1] DC_EVENT_CONNECTIVITY_CHANGED data1=0 data2=0                \r\n2023-03-22T22:21:35.9095363Z 43.76 [events-ac1] DC_EVENT_IMAP_INBOX_IDLE data1=0 data2=None                                 \r\n2023-03-22T22:21:35.9095616Z 43.76 [events-ac1] INFO src/scheduler.rs:493: IMAP session supports IDLE, using it.\r\n2023-03-22T22:21:35.9095885Z 43.88 [events-ac1] INFO src/imap/idle.rs:59: INBOX: Idle entering wait-on-remote state               \r\n2023-03-22T22:21:35.9096295Z 44.00 [events-ac1] INFO src/imap/idle.rs:74: DeltaChat: Idle has NewData ResponseData { raw: 4096, response: Fetch(1, [ModSeq(3), Flags([\"\\\\Seen\", \"\\\\Recent\"])]) }                                                                                                                                                                                \r\n2023-03-22T22:21:35.9096534Z 44.25 [events-ac1] INFO src/imap.rs:846: 0 mails read from \"DeltaChat\".\r\n2023-03-22T22:21:35.9096748Z 44.37 [events-ac1] DC_EVENT_CONNECTIVITY_CHANGED data1=0 data2=0\r\n2023-03-22T22:21:35.9096954Z 44.37 [events-ac1] DC_EVENT_IMAP_INBOX_IDLE data1=0 data2=None                  \r\n2023-03-22T22:21:35.9097214Z 44.37 [events-ac1] INFO src/scheduler.rs:493: IMAP session supports IDLE, using it.\r\n2023-03-22T22:21:35.9097490Z 44.49 [events-ac1] INFO src/imap/idle.rs:59: DeltaChat: Idle entering wait-on-remote state\r\n2023-03-22T22:21:35.9097747Z 69.38 [MAIN-ac2] imap-direct: idle_check returned [b'* 1 FETCH (FLAGS (\\\\Seen))']\r\n2023-03-22T22:21:35.9097918Z 69.38 [MAIN-ac2] b'* 1 FETCH (FLAGS (\\\\Seen))'                                                   \r\n2023-03-22T22:21:35.9098214Z 69.38 [MAIN-ac1] imap-direct: calling idle_check                      \r\n2023-03-22T22:21:35.9098432Z 69.38 [MAIN-ac1] imap-direct: idle_check returned [b'* 1 EXISTS']\r\n2023-03-22T22:21:35.9098614Z 69.38 [MAIN-ac1] imap-direct: calling idle_check                                                \r\n2023-03-22T22:21:35.9099014Z 69.66 [events-ac2] INFO src/imap/idle.rs:74: DeltaChat: Idle has NewData ResponseData { raw: 4096, response: Fetch(1, [ModSeq(7), Flags([\"\\\\Seen\", \"\\\\Recent\"])]) }                                                                                                \r\n2023-03-22T22:21:35.9099263Z 69.91 [events-ac2] INFO src/imap.rs:846: 0 mails read from \"DeltaChat\".        \r\n2023-03-22T22:21:35.9099476Z 70.03 [events-ac2] DC_EVENT_CONNECTIVITY_CHANGED data1=0 data2=0                                                                                                  \r\n2023-03-22T22:21:35.9099680Z 70.03 [events-ac2] DC_EVENT_IMAP_INBOX_IDLE data1=0 data2=None\r\n2023-03-22T22:21:35.9099929Z 70.04 [events-ac2] INFO src/scheduler.rs:493: IMAP session supports IDLE, using it.\r\n2023-03-22T22:21:35.9100191Z 70.16 [events-ac2] INFO src/imap/idle.rs:59: DeltaChat: Idle entering wait-on-remote state\r\n2023-03-22T22:21:35.9100425Z 112.27 [MAIN-ac1] imap-direct: idle_check returned [b'* OK Still here']  \r\n2023-03-22T22:21:35.9100613Z 112.27 [MAIN-ac1] imap-direct: calling idle_check                      \r\n2023-03-22T22:21:35.9100878Z ----------------------------- Captured stderr call -----------------------------\r\n2023-03-22T22:21:35.9100893Z                                                                             \r\n2023-03-22T22:21:35.9101028Z +++++++++++++++++++++++++++++++++++ Timeout ++++++++++++++++++++++++++++++++++++\r\n```\r\n\r\nHere `ac1` put its Delta Chat folder connection into IDLE and marks the message in the Delta Chat folder as seen. Core Delta Chat folder connection is interrupted with `FETCH (FLAGS (\\Seen \\Recent))`, but direct IMAP connection (`MAIN-ac1`, do not look at `MAIN-ac2`) only got `EXISTS` and then `OK Still here`, while waiting for `FETCH`. Direct IMAP was switched to `IDLE` before marking the message as seen here, messages are marked as seen within the `with` block:\r\nhttps://github.com/deltachat/deltachat-core-rust/blob/3fdcffb314aa48fb7d3336d3f9cb911fbaed7b39/python/tests/test_1_online.py#L624\r\n\r\nMaybe Dovecot sends `FETCH` only to a single `IDLE` connection when both the core and direct IMAP are listening? This is worth testing with direct `ncat`/`openssl s_client` connections and documenting in the issue.\r\n\r\nIf we cannot solve this flakyness and understand Dovecot behavior here, there is always an option to stop using `.wait_for_seen()` and instead use direct IMAP to inspect the mailbox state at the end of the test, after waiting for some core events that indicate it has done marking the messages as seen.",
  "files_changed": [
    {
      "filename": "python/tests/test_0_complex_or_slow.py",
      "status": "modified",
      "patch": "@@ -220,16 +220,16 @@ def assert_folders_configured(ac):\n     acfactory.bring_accounts_online()\n     assert_folders_configured(ac1)\n \n-    assert ac1.direct_imap.select_config_folder(\"mvbox\" if mvbox_move else \"inbox\")\n-    with ac1.direct_imap.idle() as idle1:\n-        lp.sec(\"send out message with bcc to ourselves\")\n-        ac1.set_config(\"bcc_self\", \"1\")\n-        chat = acfactory.get_accepted_chat(ac1, ac2)\n-        chat.send_text(\"message text\")\n-        assert_folders_configured(ac1)\n-\n-        lp.sec(\"wait until the bcc_self message arrives in correct folder and is marked seen\")\n-        assert idle1.wait_for_seen()\n+    lp.sec(\"send out message with bcc to ourselves\")\n+    ac1.set_config(\"bcc_self\", \"1\")\n+    chat = acfactory.get_accepted_chat(ac1, ac2)\n+    chat.send_text(\"message text\")\n+\n+    lp.sec(\"wait until the bcc_self message arrives in correct folder and is marked seen\")\n+    if mvbox_move:\n+        ac1._evtracker.get_info_contains(\"Marked messages [0-9]+ in folder DeltaChat as seen.\")\n+    else:\n+        ac1._evtracker.get_info_contains(\"Marked messages [0-9]+ in folder INBOX as seen.\")\n     assert_folders_configured(ac1)\n \n     lp.sec(\"create a cloned ac1 and fetch contact history during configure\")\n@@ -271,12 +271,12 @@ def test_fetch_existing_msgs_group_and_single(acfactory, lp):\n     ac1._evtracker.wait_next_incoming_message()\n \n     lp.sec(\"send out message with bcc to ourselves\")\n-    with ac1.direct_imap.idle() as idle1:\n-        ac1.set_config(\"bcc_self\", \"1\")\n-        ac1_ac2_chat = ac1.create_chat(ac2)\n-        ac1_ac2_chat.send_text(\"outgoing, encrypted direct message, creating a chat\")\n-        # wait until the bcc_self message arrives\n-        assert idle1.wait_for_seen()\n+    ac1.set_config(\"bcc_self\", \"1\")\n+    ac1_ac2_chat = ac1.create_chat(ac2)\n+    ac1_ac2_chat.send_text(\"outgoing, encrypted direct message, creating a chat\")\n+\n+    # wait until the bcc_self message arrives\n+    ac1._evtracker.get_info_contains(\"Marked messages [0-9]+ in folder INBOX as seen.\")\n \n     lp.sec(\"Clone online account and let it fetch the existing messages\")\n     ac1_clone = acfactory.new_online_configuring_account(cloned_from=ac1)"
    },
    {
      "filename": "python/tests/test_1_online.py",
      "status": "modified",
      "patch": "@@ -518,22 +518,22 @@ def test_send_and_receive_message_markseen(acfactory, lp):\n     msg4 = ac2._evtracker.wait_next_incoming_message()\n \n     lp.sec(\"mark messages as seen on ac2, wait for changes on ac1\")\n-    with ac1.direct_imap.idle() as idle1:\n-        with ac2.direct_imap.idle() as idle2:\n-            ac2.mark_seen_messages([msg2, msg4])\n-            ev = ac2._evtracker.get_matching(\"DC_EVENT_MSGS_NOTICED\")\n-            assert msg2.chat.id == msg4.chat.id\n-            assert ev.data1 == msg2.chat.id\n-            assert ev.data2 == 0\n-            idle2.wait_for_seen()\n-\n-        lp.step(\"1\")\n-        for _i in range(2):\n-            ev = ac1._evtracker.get_matching(\"DC_EVENT_MSG_READ\")\n-            assert ev.data1 > const.DC_CHAT_ID_LAST_SPECIAL\n-            assert ev.data2 > const.DC_MSG_ID_LAST_SPECIAL\n-        lp.step(\"2\")\n-        idle1.wait_for_seen()  # Check that ac1 marks the read receipt as read\n+    ac2.mark_seen_messages([msg2, msg4])\n+    ev = ac2._evtracker.get_matching(\"DC_EVENT_MSGS_NOTICED\")\n+    assert msg2.chat.id == msg4.chat.id\n+    assert ev.data1 == msg2.chat.id\n+    assert ev.data2 == 0\n+    ac2._evtracker.get_info_contains(\"Marked messages .* in folder INBOX as seen.\")\n+\n+    lp.step(\"1\")\n+    for _i in range(2):\n+        ev = ac1._evtracker.get_matching(\"DC_EVENT_MSG_READ\")\n+        assert ev.data1 > const.DC_CHAT_ID_LAST_SPECIAL\n+        assert ev.data2 > const.DC_MSG_ID_LAST_SPECIAL\n+    lp.step(\"2\")\n+\n+    # Check that ac1 marks the read receipt as read.\n+    ac1._evtracker.get_info_contains(\"Marked messages .* in folder INBOX as seen.\")\n \n     assert msg1.is_out_mdn_received()\n     assert msg3.is_out_mdn_received()\n@@ -618,18 +618,24 @@ def test_markseen_message_and_mdn(acfactory, mvbox_move):\n     # Do not send BCC to self, we only want to test MDN on ac1.\n     ac1.set_config(\"bcc_self\", \"0\")\n \n+    acfactory.get_accepted_chat(ac1, ac2).send_text(\"hi\")\n+    msg = ac2._evtracker.wait_next_incoming_message()\n+\n+    ac2.mark_seen_messages([msg])\n+\n     folder = \"mvbox\" if mvbox_move else \"inbox\"\n+    for ac in [ac1, ac2]:\n+        if mvbox_move:\n+            ac._evtracker.get_info_contains(\"Marked messages [0-9]+ in folder DeltaChat as seen.\")\n+        else:\n+            ac._evtracker.get_info_contains(\"Marked messages [0-9]+ in folder INBOX as seen.\")\n     ac1.direct_imap.select_config_folder(folder)\n     ac2.direct_imap.select_config_folder(folder)\n-    with ac1.direct_imap.idle() as idle1:\n-        with ac2.direct_imap.idle() as idle2:\n-            acfactory.get_accepted_chat(ac1, ac2).send_text(\"hi\")\n-            msg = ac2._evtracker.wait_next_incoming_message()\n \n-            ac2.mark_seen_messages([msg])\n-\n-            idle2.wait_for_seen()  # Check original message is marked as seen\n-            idle1.wait_for_seen()  # Check that the mdn is marked as seen\n+    # Check that the mdn is marked as seen\n+    assert len(list(ac1.direct_imap.conn.fetch(AND(seen=True)))) == 1\n+    # Check original message is marked as seen\n+    assert len(list(ac2.direct_imap.conn.fetch(AND(seen=True)))) == 1\n \n \n def test_reply_privately(acfactory):\n@@ -683,23 +689,24 @@ def test_mdn_asymmetric(acfactory, lp):\n \n     assert len(msg.chat.get_messages()) == 1\n \n-    ac1.direct_imap.select_config_folder(\"mvbox\")\n-    with ac1.direct_imap.idle() as idle1:\n-        lp.sec(\"ac2: mark incoming message as seen\")\n-        ac2.mark_seen_messages([msg])\n+    lp.sec(\"ac2: mark incoming message as seen\")\n+    ac2.mark_seen_messages([msg])\n \n-        lp.sec(\"ac1: waiting for incoming activity\")\n-        # MDN should be moved even though MDNs are already disabled\n-        ac1._evtracker.get_matching(\"DC_EVENT_IMAP_MESSAGE_MOVED\")\n+    lp.sec(\"ac1: waiting for incoming activity\")\n+    # MDN should be moved even though MDNs are already disabled\n+    ac1._evtracker.get_matching(\"DC_EVENT_IMAP_MESSAGE_MOVED\")\n \n-        assert len(chat.get_messages()) == 1\n+    assert len(chat.get_messages()) == 1\n \n-        # Wait for the message to be marked as seen on IMAP.\n-        assert idle1.wait_for_seen()\n+    # Wait for the message to be marked as seen on IMAP.\n+    ac1._evtracker.get_info_contains(\"Marked messages 1 in folder DeltaChat as seen.\")\n \n     # MDN is received even though MDNs are already disabled\n     assert msg_out.is_out_mdn_received()\n \n+    ac1.direct_imap.select_config_folder(\"mvbox\")\n+    assert len(list(ac1.direct_imap.conn.fetch(AND(seen=True)))) == 1\n+\n \n def test_send_and_receive_will_encrypt_decrypt(acfactory, lp):\n     ac1, ac2 = acfactory.get_online_accounts(2)"
    },
    {
      "filename": "python/tox.ini",
      "status": "modified",
      "patch": "@@ -8,7 +8,7 @@ envlist =\n \n [testenv]\n commands = \n-    pytest -n6 --extra-info --reruns 2 --reruns-delay 5 -v -rsXx --ignored --strict-tls {posargs: tests examples}\n+    pytest -n6 --extra-info -v -rsXx --ignored --strict-tls {posargs: tests examples}\n     pip wheel . -w {toxworkdir}/wheelhouse --no-deps\n setenv =\n # Avoid stack overflow when Rust core is built without optimizations.\n@@ -21,7 +21,6 @@ passenv =\n     RUSTC_WRAPPER\n deps = \n     pytest\n-    pytest-rerunfailures\n     pytest-timeout\n     pytest-xdist\n     pdbpp"
    }
  ],
  "fix_category": NaN,
  "root_cause_category": NaN,
  "root_cause_subcategory": "!Rust (Python)"
}