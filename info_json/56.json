{
  "id": 56,
  "repo": "zed",
  "issue_url": "https://github.com/zed-industries/zed/issues/13073",
  "pr_url": "https://github.com/zed-industries/zed/pull/13074",
  "issue_description": "### Check for existing issues\n\n- [X] Completed\n\n### Describe the feature\n\nWe just got done packaging the pre-release of Zed 0.139.3 on Solus so this is part feature request, part bug report, and part guide for other packagers on how to de-bundle Zed.\r\n\r\nLinux distributions _strongly_ prefer when applications use system versions of libraries instead of bundled versions for the following reasons (listed roughly in order of priority)\r\n1. Security: When a CVE is detected in a library the distribution can patch or update just that library and every application that links against it is protected against that vulnerability. If a library is bundled then all bundling applications also need to be identified and updated individually (which can be difficult when libraries build specific versions as other things may need to be updated). For this discussion, libcurl and openssl are the two libraries that are most relevant as they bundled by Zed and the most likely to have CVEs reported\r\n2. Configuration: Some distributions apply patches to libraries in order to better make them conform to certain standards or otherwise fit in the distribution. Bundled versions of the libraries will behave inconsistently without those patches\r\n3. Disk space: Removing bundled versions of libs from a package reduces disk space use both in terms of binary size as well as debug symbols size.\r\n4. Performance: Some distributions perform BOLTing, PGO compilation or other advanced build techniques on their packages that can dramatically improve performance. Such techniques are usually not applied to bundled versions of libs and so they may be slower than using the system versions. Also, common system libs are often in the system page cache and initialization of them can be much faster than bundled versions.\r\n(I feel like I'm missing a couple of reasons but I'll edit them in later)\r\n\r\nWhile working on our Zed package I went through and identified all native libs that it was bundling that it could be using system versions for, and here are the list of them and how each can be resolved:\r\n\r\n### Openssl:\r\nThis is IMO the most important library that is bundled and the one that is most likely to see CVEs that need it to be patched. It is also the package that is most frequently patched to work with distribution policies.\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/crates/client/Cargo.toml b/crates/client/Cargo.toml\r\nindex b502c2d1e..5531a68da 100644\r\n--- a/crates/client/Cargo.toml\r\n+++ b/crates/client/Cargo.toml\r\n@@ -19,7 +19,7 @@ test-support = [\"clock/test-support\", \"collections/test-support\", \"gpui/test-sup\r\n anyhow.workspace = true\r\n async-recursion = \"0.3\"\r\n async-tungstenite = { version = \"0.16\", features = [\"async-std\", \"async-native-tls\"] }\r\n-async-native-tls = { version = \"0.5.0\", features = [\"vendored\"] }\r\n+async-native-tls = { version = \"0.5.0\" }\r\n chrono = { workspace = true, features = [\"serde\"] }\r\n clock.workspace = true\r\n collections.workspace = true\r\n@@ -61,7 +61,7 @@ util = { workspace = true, features = [\"test-support\"] }\r\n http = { workspace = true, features = [\"test-support\"] }\r\n \r\n [target.'cfg(target_os = \"linux\")'.dependencies]\r\n-async-native-tls = {\"version\" = \"0.5.0\", features = [\"vendored\"]}\r\n+async-native-tls = {\"version\" = \"0.5.0\"}\r\n # This is an indirect dependency of async-tungstenite that is included\r\n # here so we can vendor libssl with the feature flag.\r\n [package.metadata.cargo-machete]\r\n```\r\n</details>\r\n\r\n### libcurl:\r\nThis is another frequent source of CVEs and is also frequently patched, though not as often as openssl\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/Cargo.toml b/Cargo.toml\r\nindex 72dd44a38..96f82af16 100644\r\n--- a/Cargo.toml\r\n+++ b/Cargo.toml\r\n@@ -296,7 +296,6 @@ ignore = \"0.4.22\"\r\n indoc = \"1\"\r\n # We explicitly disable http2 support in isahc.\r\n isahc = { version = \"1.7.2\", default-features = false, features = [\r\n-    \"static-curl\",\r\n     \"text-decoding\",\r\n ] }\r\n itertools = \"0.11.0\"\r\n```\r\n</details>\r\n\r\n### sqlite3:\r\nThis library is ubiquitous and IMO there is no reason not to use the system version.\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/crates/sqlez/Cargo.toml b/crates/sqlez/Cargo.toml\r\nindex 98b05a06e..b97001dd8 100644\r\n--- a/crates/sqlez/Cargo.toml\r\n+++ b/crates/sqlez/Cargo.toml\r\n@@ -14,7 +14,7 @@ collections.workspace = true\r\n futures.workspace = true\r\n indoc.workspace = true\r\n lazy_static.workspace = true\r\n-libsqlite3-sys = { version = \"0.26\", features = [\"bundled\"] }\r\n+libsqlite3-sys = { version = \"0.26\", features = [\"buildtime_bindgen\"] }\r\n parking_lot.workspace = true\r\n smol.workspace = true\r\n thread_local = \"1.1.4\"\r\n```\r\n</details>\r\n\r\n### libzstd:\r\nThis library is also fairly ubiquitous now and is also frequently PGO and BOLT compiled in order to make it faster.\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/crates/rpc/Cargo.toml b/crates/rpc/Cargo.toml\r\nindex b197073b7..d77ed09fa 100644\r\n--- a/crates/rpc/Cargo.toml\r\n+++ b/crates/rpc/Cargo.toml\r\n@@ -33,7 +33,7 @@ serde_json.workspace = true\r\n strum.workspace = true\r\n tracing = { version = \"0.1.34\", features = [\"log\"] }\r\n util.workspace = true\r\n-zstd = \"0.11\"\r\n+zstd = { version = \"0.11\", features = [ \"pkg-config\" ] }\r\n \r\n [build-dependencies]\r\n prost-build.workspace = true\r\n```\r\n</details>\r\n\r\n### Fontconfig/freetype2\r\nThese libraries are already linked against if present and the devel packages are present. Libraries are linked against unless `RUST_FONTCONFIG_DLOPEN=on` is defined during the build.\r\n\r\nThere is something broken here though. Our ABI scanning tools detect that libfontconfig and libfreetype2 are only linked against when Zed is built in dev profile. When it's built in release profile they are not linked against and using file open detection tools I confirmed that neither library was loaded when launching in release profile when they were with the dev profile.\r\n\r\n### ALSA\r\nLinked against as part of the build. I didn't check whether or not this was optional (based on detecting the pkgconfig). I did look into what was using ALSA directly instead of linking against something modern like libpulse and it looks like an issue with the CPAL Rust library not supporting pulse. They do have a PR open for using PipeWire APIs so hopefully we can get this using a modern audio library instead\r\n\r\n### libgit2\r\nAs anyone familiar with anything that links against libgit2 can tell you libgit2 bindings are notoriously flaky and are almost always pinned to a very specific range of libgit2 versions. Our version on Solus is slightly too old for it so I didn't really look into it too much, but it appears that your system libgit2 library should be used automatically assuming it's new enough (At or above v1.7.2 but not v1.8.0). TBH given the fragility of these bindings I'd probably make sure that libgit2 devel packages are available in your build root and if they're used great if not then it's probably not worth the hassle and just mark in your package metadata that the package bundles libgit2.\r\n\r\n### libz\r\nI also didn't look too much into it but it looks like it builds a bundled libz library but uses the system one via dlopen() if compatible (which almost all distro builds are going to be). I confirmed that it loaded the libz library at startup.\r\n\r\n### Wayland\r\nThe wayland libraries are built and bundled from included headers and if the system has a compatible version (IE all systems with anything even remotely Wayland-related installed) then the system one is dlopen()ed. I don't think this can actually use the bundled version in any scenario and in fact might just build the bindings for Wayland (didn't check that far enough)\r\n\r\n(If anyone is interested in it [here](https://raw.githubusercontent.com/getsolus/packages/main/packages/z/zed/files/0001-Use-system-libs.patch) is our complete patch that we apply as part of the build).\r\n\r\nRegarding making this easier for building for distributions without requiring patches it seems to me that we could modify the `build.rs` files of the given crates in order to change the features during the build if certain environmental variables are set, and defaulting to bundled if not. This would also improve things for the Flatpak since they also provide a runtime with most (all?) of these libs that they keep updated without requiring the application layer to be rebuilt on updates.\n\n### If applicable, add mockups / screenshots to help present your vision of the feature\n\n\n_No response_",
  "files_changed": [
    {
      "filename": ".github/workflows/ci.yml",
      "status": "modified",
      "patch": "@@ -307,15 +307,15 @@ jobs:\n             exit 1\n           fi\n \n-      - name: Create and upload Linux .tar.gz bundle\n+      - name: Create Linux .tar.gz bundle\n         run: script/bundle-linux\n \n       - name: Upload Linux bundle to workflow run if main branch or specific label\n         uses: actions/upload-artifact@v4\n         if: ${{ github.ref == 'refs/heads/main' }} || contains(github.event.pull_request.labels.*.name, 'run-bundling') }}\n         with:\n           name: zed-${{ github.event.pull_request.head.sha || github.sha }}-x86_64-unknown-linux-gnu.tar.gz\n-          path: zed-*.tar.gz\n+          path: target/release/zed-*.tar.gz\n \n       - name: Upload app bundle to release\n         uses: softprops/action-gh-release@v1\n@@ -348,12 +348,12 @@ jobs:\n       - name: Set up Clang\n         run: |\n           sudo apt-get update\n-          sudo apt-get install -y llvm-10 clang-10 build-essential cmake pkg-config libasound2-dev libfontconfig-dev libwayland-dev libxkbcommon-x11-dev libssl-dev libzstd-dev libvulkan1 libgit2-dev\n+          sudo apt-get install -y llvm-10 clang-10 build-essential cmake pkg-config libasound2-dev libfontconfig-dev libwayland-dev libxkbcommon-x11-dev libssl-dev libsqlite3-dev libzstd-dev libvulkan1 libgit2-dev\n           echo \"/usr/lib/llvm-10/bin\" >> $GITHUB_PATH\n \n       - uses: rui314/setup-mold@v1\n         with:\n-          mold_version: 2.32.0\n+          mold-version: 2.32.0\n \n       - name: rustup\n         run: |"
    },
    {
      "filename": "Cargo.lock",
      "status": "modified",
      "patch": "@@ -2279,6 +2279,7 @@ dependencies = [\n  \"futures 0.3.28\",\n  \"gpui\",\n  \"http 0.1.0\",\n+ \"isahc\",\n  \"lazy_static\",\n  \"log\",\n  \"once_cell\",\n@@ -7092,9 +7093,9 @@ checksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n \n [[package]]\n name = \"openssl-src\"\n-version = \"300.2.3+3.2.1\"\n+version = \"300.3.0+3.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5cff92b6f71555b61bb9315f7c64da3ca43d87531622120fea0195fc761b4843\"\n+checksum = \"eba8804a1c5765b18c4b3f907e6897ebabeedebc9830e1a0046c4a4cf44663e1\"\n dependencies = [\n  \"cc\",\n ]"
    },
    {
      "filename": "Cargo.toml",
      "status": "modified",
      "patch": "@@ -312,10 +312,7 @@ image = \"0.23\"\n indexmap = { version = \"1.6.2\", features = [\"serde\"] }\n indoc = \"1\"\n # We explicitly disable http2 support in isahc.\n-isahc = { version = \"1.7.2\", default-features = false, features = [\n-    \"static-curl\",\n-    \"text-decoding\",\n-] }\n+isahc = { version = \"1.7.2\", default-features = false, features = [ \"text-decoding\" ] }\n itertools = \"0.11.0\"\n lazy_static = \"1.4.0\"\n libc = \"0.2\""
    },
    {
      "filename": "crates/client/Cargo.toml",
      "status": "modified",
      "patch": "@@ -19,7 +19,6 @@ test-support = [\"clock/test-support\", \"collections/test-support\", \"gpui/test-sup\n anyhow.workspace = true\n async-recursion = \"0.3\"\n async-tungstenite = { version = \"0.16\", features = [\"async-std\", \"async-native-tls\"] }\n-async-native-tls = { version = \"0.5.0\", features = [\"vendored\"] }\n chrono = { workspace = true, features = [\"serde\"] }\n clock.workspace = true\n collections.workspace = true\n@@ -68,10 +67,5 @@ windows.workspace = true\n \n [target.'cfg(target_os = \"macos\")'.dependencies]\n cocoa.workspace = true\n-\n-[target.'cfg(target_os = \"linux\")'.dependencies]\n-async-native-tls = {\"version\" = \"0.5.0\", features = [\"vendored\"]}\n-# This is an indirect dependency of async-tungstenite that is included\n-# here so we can vendor libssl with the feature flag.\n-[package.metadata.cargo-machete]\n-ignored = [\"async-native-tls\"]\n+isahc = { workspace = true, features = [\"static-curl\"] }\n+async-native-tls = { version = \"0.5.0\", features = [\"vendored\"] }"
    },
    {
      "filename": "crates/gpui/Cargo.toml",
      "status": "modified",
      "patch": "@@ -135,6 +135,7 @@ xim = { git = \"https://github.com/npmania/xim-rs\", rev = \"27132caffc5b9bc9c432ca\n     \"x11rb-xcb\",\n     \"x11rb-client\",\n ] }\n+font-kit = { git = \"https://github.com/zed-industries/font-kit\", rev = \"5a5c4d4\", features = [\"source-fontconfig-dlopen\"] }\n x11-clipboard = \"0.9.2\"\n \n [target.'cfg(windows)'.dependencies]"
    },
    {
      "filename": "crates/rpc/Cargo.toml",
      "status": "modified",
      "patch": "@@ -35,6 +35,10 @@ tracing = { version = \"0.1.34\", features = [\"log\"] }\n util.workspace = true\n zstd = \"0.11\"\n \n+[target.'cfg(target_os = \"linux\")'.dependencies]\n+zstd = { version = \"0.11\", features = [ \"pkg-config\" ] }\n+\n+\n [dev-dependencies]\n collections = { workspace = true, features = [\"test-support\"] }\n env_logger.workspace = true"
    },
    {
      "filename": "crates/sqlez/src/connection.rs",
      "status": "modified",
      "patch": "@@ -128,9 +128,15 @@ impl Connection {\n                             &mut remaining_sql_ptr,\n                         );\n \n+                        #[cfg(not(target_os = \"linux\"))]\n+                        let offset = sqlite3_error_offset(temp_connection.sqlite3);\n+\n+                        #[cfg(target_os = \"linux\")]\n+                        let offset = 0;\n+\n                         (\n                             sqlite3_errcode(temp_connection.sqlite3),\n-                            sqlite3_error_offset(temp_connection.sqlite3),\n+                            offset,\n                             sqlite3_errmsg(temp_connection.sqlite3),\n                             Some(temp_connection),\n                         )\n@@ -142,9 +148,16 @@ impl Connection {\n                             &mut raw_statement,\n                             &mut remaining_sql_ptr,\n                         );\n+\n+                        #[cfg(not(target_os = \"linux\"))]\n+                        let offset = sqlite3_error_offset(self.sqlite3);\n+\n+                        #[cfg(target_os = \"linux\")]\n+                        let offset = 0;\n+\n                         (\n                             sqlite3_errcode(self.sqlite3),\n-                            sqlite3_error_offset(self.sqlite3),\n+                            offset,\n                             sqlite3_errmsg(self.sqlite3),\n                             None,\n                         )\n@@ -395,6 +408,7 @@ mod test {\n         );\n     }\n \n+    #[cfg(not(target_os = \"linux\"))]\n     #[test]\n     fn test_sql_has_syntax_errors() {\n         let connection = Connection::open_memory(Some(\"test_sql_has_syntax_errors\"));"
    },
    {
      "filename": "crates/sqlez_macros/src/sqlez_macros.rs",
      "status": "modified",
      "patch": "@@ -12,7 +12,12 @@ lazy_static::lazy_static! {\n pub fn sql(tokens: TokenStream) -> TokenStream {\n     let (spans, sql) = make_sql(tokens);\n \n+    #[cfg(not(target_os = \"linux\"))]\n     let error = SQLITE.sql_has_syntax_error(sql.trim());\n+\n+    #[cfg(target_os = \"linux\")]\n+    let error: Option<(String, usize)> = None;\n+\n     let formatted_sql = sqlformat::format(&sql, &sqlformat::QueryParams::None, Default::default());\n \n     if let Some((error, error_offset)) = error {"
    },
    {
      "filename": "script/linux",
      "status": "modified",
      "patch": "@@ -30,6 +30,7 @@ if [[ -n $apt ]]; then\n     jq\n     gettext-base\n     elfutils\n+    libsqlite3-dev\n   )\n   $maysudo \"$apt\" install -y \"${deps[@]}\"\n   exit 0\n@@ -56,6 +57,7 @@ if [[ -n $dnf ]]; then\n     perl-File-Compare\n     perl-File-Copy\n     vulkan-loader\n+    sqlite-devel\n   )\n \n   # libxkbcommon-x11-devel is in the crb repo on RHEL and CentOS, not needed for Fedora\n@@ -84,6 +86,7 @@ if [[ -n $zyp ]]; then\n     libzstd-devel\n     libvulkan1\n     mold\n+    sqlite3-devel\n   )\n   $maysudo \"$zyp\" install -y \"${deps[@]}\"\n   exit 0\n@@ -105,6 +108,7 @@ if [[ -n $pacman ]]; then\n     zstd\n     pkgconf\n     mold\n+    sqlite\n   )\n   $maysudo \"$pacman\" -S --needed --noconfirm \"${deps[@]}\"\n   exit 0\n@@ -124,6 +128,7 @@ if [[ -n $xbps ]]; then\n     wayland-devel\n     vulkan-loader\n     mold\n+    sqlite-devel\n   )\n   $maysudo \"$xbps\" -Syu \"${deps[@]}\"\n   exit 0\n@@ -143,6 +148,7 @@ if [[ -n $emerge ]]; then\n     x11-libs/libxcb\n     x11-libs/libxkbcommon\n     sys-devel/mold\n+    dev-db/sqlite\n   )\n   $maysudo \"$emerge\" -u \"${deps[@]}\"\n   exit 0"
    }
  ],
  "fix_category": NaN,
  "root_cause_category": NaN,
  "root_cause_subcategory": "Cavalier use of flaky moniker"
}