{
  "id": 61,
  "repo": "lance",
  "issue_url": "https://github.com/lancedb/lance/issues/232",
  "pr_url": "https://github.com/lancedb/lance/pull/234",
  "issue_description": "Coco test:\r\n\r\n```\r\nRun ./test_dataset.sh coco 40\r\n+ DATASET=coco\r\n+ NROWS=40\r\n+ pushd ./coco\r\n~/work/lance/lance/python/benchmarks/coco ~/work/lance/lance/python/benchmarks\r\n+ ./datagen.py s3://eto-public/datasets/coco --num-rows 40 -o /tmp/coco.lance\r\n+ python3 -c 'import lance; assert len(lance.dataset('\\''/tmp/coco.lance'\\'').to_table()) == 40'\r\n+ ./analytics.py /tmp -f lance\r\nTraceback (most recent call last):\r\nFunction label_distribution() {'base_uri': '/tmp', 'fmt': 'lance', 'flavor': None} Took 0.0070 seconds\r\n  File \"/home/runner/work/lance/lance/python/benchmarks/coco/./analytics.py\", line 134, in <module>\r\n    main()\r\n  File \"/opt/hostedtoolcache/Python/3.10.7/x64/lib/python3.10/site-packages/click/core.py\", line [11](https://github.com/eto-ai/lance/actions/runs/3239546539/jobs/5309061418#step:6:12)30, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/opt/hostedtoolcache/Python/3.10.7/x64/lib/python3.10/site-packages/click/core.py\", line 1055, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/opt/hostedtoolcache/Python/3.10.7/x64/lib/python3.10/site-packages/click/core.py\", line [14](https://github.com/eto-ai/lance/actions/runs/3239546539/jobs/5309061418#step:6:15)04, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/opt/hostedtoolcache/Python/3.10.7/x64/lib/python3.10/site-packages/click/core.py\", line 760, in invoke\r\n    return __callback(*args, **kwargs)\r\n  File \"/home/runner/work/lance/lance/python/benchmarks/coco/../suite.py\", line 119, in main\r\n    [run_benchmark(b) for b in self.list_benchmarks()]\r\n  File \"/home/runner/work/lance/lance/python/benchmarks/coco/../suite.py\", line 119, in <listcomp>\r\n    [run_benchmark(b) for b in self.list_benchmarks()]\r\n  File \"/home/runner/work/lance/lance/python/benchmarks/coco/../suite.py\", line 110, in run_benchmark\r\n    b.run(base_uri=base_uri, fmt=f, flavor=flavor)\r\n  File \"/home/runner/work/lance/lance/python/benchmarks/coco/../suite.py\", line 141, in run\r\n    output = func(*args, **kwargs)\r\n  File \"/home/runner/work/lance/lance/python/benchmarks/coco/../suite.py\", line [15](https://github.com/eto-ai/lance/actions/runs/3239546539/jobs/5309061418#step:6:16)2, in timeit_wrapper\r\n    result = func(*args, **kwargs)\r\n  File \"/home/runner/work/lance/lance/python/benchmarks/coco/./analytics.py\", line 43, in filter_data\r\n    return _filter_data_lance(base_uri, flavor=flavor)\r\n  File \"/home/runner/work/lance/lance/python/benchmarks/coco/./analytics.py\", line 86, in _filter_data_lance\r\n    filtered_ids = duckdb.query(query).arrow().column(\"image_id\").combine_chunks()\r\n  File \"pyarrow/table.pxi\", line 700, in pyarrow.lib.ChunkedArray.combine_chunks\r\n  File \"pyarrow/array.pxi\", line [28](https://github.com/eto-ai/lance/actions/runs/3239546539/jobs/5309061418#step:6:29)89, in pyarrow.lib.concat_arrays\r\n  File \"pyarrow/error.pxi\", line 1[44](https://github.com/eto-ai/lance/actions/runs/3239546539/jobs/5309061418#step:6:45), in pyarrow.lib.pyarrow_internal_check_status\r\n  File \"pyarrow/error.pxi\", line 100, in pyarrow.lib.check_status\r\npyarrow.lib.ArrowInvalid: Must pass at least one array\r\n```\r\n\r\nhttps://github.com/eto-ai/lance/actions/runs/3239546539/jobs/5309061418\r\n",
  "files_changed": [
    {
      "filename": ".github/workflows/benchmarks.yml",
      "status": "modified",
      "patch": "@@ -33,7 +33,7 @@ jobs:\n     - name: Run test\n       working-directory: python/benchmarks\n       run: |\n-        ./test_dataset.sh ${{ matrix.dataset }} 40\n+        ./test_dataset.sh ${{ matrix.dataset }} 200\n   functions:\n     timeout-minutes: 30\n     runs-on: \"ubuntu-22.04\""
    },
    {
      "filename": "python/benchmarks/oxford_pet/datagen.py",
      "status": "modified",
      "patch": "@@ -69,9 +69,9 @@ def read_metadata(self, num_rows: int = 0, check_quality=False) -> pd.DataFrame:\n             with_split = pd.concat([f.sample(rows[s]) for s, f in by_split])\n \n         xml_files = (\n-                os.path.join(self.uri_root, \"annotations\", \"xmls/\")\n-                + with_split.filename\n-                + \".xml\"\n+            os.path.join(self.uri_root, \"annotations\", \"xmls/\")\n+            + with_split.filename\n+            + \".xml\"\n         )\n         ann_df = pd.DataFrame(download_uris(xml_files, func=_get_xml))\n         with_xmls = pd.concat(\n@@ -108,9 +108,9 @@ def _convert(obj_list):\n \n         with_xmls[\"object\"] = with_xmls[\"object\"].apply(_convert)\n         with_xmls[\"external_image\"] = with_xmls[\"filename\"].apply(\n-            lambda x: os.path.join(self.uri_root, f\"images/{x}.jpg\"))\n-        (with_xmls.reset_index(drop=True)\n-         .reset_index(names=[\"_pk\"], inplace=True))\n+            lambda x: os.path.join(self.uri_root, f\"images/{x}.jpg\")\n+        )\n+        with_xmls = with_xmls.reset_index(drop=True).reset_index(names=[\"_pk\"])\n         return with_xmls\n \n     def _get_index(self, name: str) -> pd.DataFrame:"
    }
  ],
  "fix_category": NaN,
  "root_cause_category": NaN,
  "root_cause_subcategory": "!Rust (CI)"
}