{
  "id": 67,
  "repo": "reth",
  "issue_url": "https://github.com/paradigmxyz/reth/issues/1144",
  "pr_url": "https://github.com/paradigmxyz/reth/pull/1145",
  "issue_description": "### Describe the bug\r\n\r\n`bodies::bodies::tests::streams_bodies_in_order_after_range_reset` occasionally fails on main. A failure can be seen in CI here:\r\nhttps://github.com/paradigmxyz/reth/actions/runs/4077743007/jobs/7027133041#step:8:203\r\n\r\n### Steps to reproduce\r\n\r\nSometimes this can be reproduced locally with `cargo nextest run --workspace --locked --all-features`\r\n\r\n### Node logs\r\n\r\n```text\r\n--- STDERR:              reth-downloaders bodies::bodies::tests::streams_bodies_in_order_after_range_reset ---\r\nthread 'bodies::bodies::tests::streams_bodies_in_order_after_range_reset' panicked at 'assertion failed: `(left == right)`\r\n  left: `8`,\r\n right: `7`', crates/net/downloaders/src/bodies/bodies.rs:616:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\n   Canceling due to test failure: 0 tests still running\r\n```\r\n\r\n\r\n### Platform(s)\r\n\r\n_No response_\r\n\r\n### What version/commit are you on?\r\n\r\n66aa947\r\n\r\n### Code of Conduct\r\n\r\n- [X] I agree to follow the Code of Conduct",
  "files_changed": [
    {
      "filename": "crates/net/downloaders/src/bodies/bodies.rs",
      "status": "modified",
      "patch": "@@ -550,8 +550,10 @@ mod tests {\n     use assert_matches::assert_matches;\n     use futures_util::stream::StreamExt;\n     use reth_db::mdbx::{test_utils::create_test_db, EnvKind, WriteMap};\n-    use reth_interfaces::test_utils::TestConsensus;\n-    use std::sync::Arc;\n+    use reth_eth_wire::BlockBody;\n+    use reth_interfaces::test_utils::{generators::random_block_range, TestConsensus};\n+    use reth_primitives::H256;\n+    use std::{collections::HashMap, sync::Arc};\n \n     // Check that the blocks are emitted in order of block number, not in order of\n     // first-downloaded\n@@ -580,6 +582,41 @@ mod tests {\n         assert_eq!(client.times_requested(), 1);\n     }\n \n+    // Check that the number of times requested equals to the number of headers divided by request\n+    // limit.\n+    #[tokio::test]\n+    async fn requests_correct_number_of_times() {\n+        // Generate some random blocks\n+        let db = create_test_db::<WriteMap>(EnvKind::RW);\n+        let blocks = random_block_range(0..200, H256::zero(), 1..2);\n+\n+        let headers = blocks.iter().map(|block| block.header.clone()).collect::<Vec<_>>();\n+        let bodies = blocks\n+            .into_iter()\n+            .map(|block| {\n+                (\n+                    block.hash(),\n+                    BlockBody {\n+                        transactions: block.body,\n+                        ommers: block.ommers.into_iter().map(|header| header.unseal()).collect(),\n+                    },\n+                )\n+            })\n+            .collect::<HashMap<_, _>>();\n+\n+        insert_headers(&db, &headers);\n+\n+        let request_limit = 10;\n+        let client = Arc::new(TestBodiesClient::default().with_bodies(bodies.clone()));\n+        let mut downloader = BodiesDownloaderBuilder::default()\n+            .with_request_limit(request_limit)\n+            .build(client.clone(), Arc::new(TestConsensus::default()), db);\n+        downloader.set_download_range(0..200).expect(\"failed to set download range\");\n+\n+        let _ = downloader.collect::<Vec<_>>().await;\n+        assert_eq!(client.times_requested(), 20);\n+    }\n+\n     // Check that bodies are returned in correct order\n     // after resetting the download range multiple times.\n     #[tokio::test]\n@@ -612,12 +649,6 @@ mod tests {\n             assert!(downloader.latest_queued_block_number >= Some(range_start));\n             range_start += stream_batch_size as u64;\n         }\n-\n-        assert_eq!(\n-            client.times_requested(),\n-            // div_ceil equivalent\n-            ((headers.iter().filter(|x| !x.is_empty()).count() + 9) / 10) as u64,\n-        );\n     }\n \n     // Check that the downloader picks up the new range and downloads bodies after previous range"
    }
  ],
  "fix_category": "Cover specific cases",
  "root_cause_category": "Network",
  "root_cause_subcategory": "Empty header"
}