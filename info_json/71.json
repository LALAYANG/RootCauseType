{
  "id": 71,
  "repo": "databend",
  "issue_url": "https://github.com/databendlabs/databend/issues/14857",
  "pr_url": "https://github.com/databendlabs/databend/pull/14868",
  "issue_description": "**Summary**\r\n\r\nhttps://github.com/datafuselabs/databend/actions/runs/8168665641/job/22331179267?pr=14855\r\n\r\n```\r\n   FAIL [   0.257s] databend-meta::it grpc::metasrv_grpc_kv_read_v1::test_kv_read_v1_on_follower\r\n```\r\n\r\n```\r\n                             expire_at: Some(\r\n<                                1709712582,\r\n>                                1709712583,\r\n                             ),\r\n\r\n```",
  "files_changed": [
    {
      "filename": "src/meta/service/tests/it/grpc/metasrv_grpc_kv_read_v1.rs",
      "status": "modified",
      "patch": "@@ -153,21 +153,36 @@ async fn test_streamed_mget(client: &Arc<ClientHandle>, now_sec: u64) -> anyhow:\n         }))\n         .await?;\n \n-    let got = strm.map_err(|e| e.to_string()).collect::<Vec<_>>().await;\n-    assert_eq!(\n-        vec![\n-            Ok(pb::StreamItem::new(\n-                s(\"a\"),\n-                Some(pb::SeqV::with_meta(\n-                    1,\n-                    Some(KvMeta::new_expire(now_sec + 10)),\n-                    b(\"a\")\n-                ))\n-            )),\n-            Ok(pb::StreamItem::new(s(\"b\"), None)),\n-        ],\n-        got\n-    );\n+    let mut got = strm.map_err(|e| e.to_string()).collect::<Vec<_>>().await;\n+    assert_eq!(2, got.len());\n+\n+    let v1 = got.remove(0);\n+    let v2 = got.remove(0);\n+\n+    // check v1\n+    {\n+        let Ok(pb::StreamItem {\n+            key,\n+            value: Some(seq_v),\n+        }) = v1\n+        else {\n+            panic!(\"expecting Some(seq_v): but: {v1:?}\");\n+        };\n+\n+        assert_eq!(s(\"a\"), key);\n+        assert_eq!(1, seq_v.seq);\n+        assert_eq!(b(\"a\"), seq_v.data);\n+        // check meta\n+        {\n+            let KvMeta { expire_at } = seq_v.meta.unwrap();\n+            let want = now_sec + 10;\n+            assert!((want..want + 3).contains(&expire_at.unwrap()));\n+        }\n+    }\n+\n+    // check v2\n+    assert_eq!(v2, Ok(pb::StreamItem::new(s(\"b\"), None)));\n+\n     Ok(())\n }\n "
    }
  ],
  "fix_category": "Range comparison",
  "root_cause_category": "Time",
  "root_cause_subcategory": "Inconsistent clock"
}