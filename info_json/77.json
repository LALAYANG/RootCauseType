{
  "id": 77,
  "repo": "yagna",
  "issue_url": "https://github.com/golemfactory/yagna/issues/2328",
  "pr_url": "https://github.com/golemfactory/yagna/pull/2336",
  "issue_description": null,
  "files_changed": [
    {
      "filename": ".github/workflows/binaries-x86-64-hybrid-net.yml",
      "status": "modified",
      "patch": "@@ -10,6 +10,9 @@ on:\n       - master\n       - release/*\n \n+env:\n+  rust_stable: 1.64.0\n+\n jobs:\n   build:\n     name: Build binaries (x86-64) hybrid-net\n@@ -26,11 +29,19 @@ jobs:\n       - name: Checkout\n         uses: actions/checkout@v1\n \n-      - name: Install last stable Rust\n+      - name: Musl\n+        run: |\n+          sudo apt-get install musl musl-tools\n+\n+          musl-gcc -v\n+\n+      - name: Install Rust ${{ env.rust_stable }}\n         uses: actions-rs/toolchain@v1\n         with:\n-          toolchain: stable\n+          toolchain: ${{ env.rust_stable }}\n           components: rustfmt, clippy\n+          target: x86_64-unknown-linux-musl\n+          override: true\n \n       - name: Check lockfile\n         uses: actions-rs/cargo@v1\n@@ -46,17 +57,19 @@ jobs:\n           vcpkg integrate install\n \n       - name: Build binaries\n-        uses: actions-rs/cargo@v1\n-        with:\n-          command: build\n-          args: --workspace\n+        run: |\n+          cargo build --features static-openssl --target x86_64-unknown-linux-musl\n+          (cd core/gftp && cargo build --bin gftp -p gftp --features bin --target x86_64-unknown-linux-musl)\n+          (cd golem_cli && cargo build --bin golemsp -p golemsp --target x86_64-unknown-linux-musl)\n+          (cd agent/provider && cargo build --bin ya-provider -p ya-provider --target x86_64-unknown-linux-musl)\n+          (cd exe-unit && cargo build --bin exe-unit -p ya-exe-unit --features openssl/vendored --target x86_64-unknown-linux-musl)\n \n       - name: Copy binaries\n         shell: bash\n         run: |\n           mkdir build\n           if [ \"$RUNNER_OS\" == \"Linux\" ]; then\n-            cp target/debug/{yagna,ya-provider,exe-unit,golemsp,gftp} build\n+            cp target/x86_64-unknown-linux-musl/debug/{yagna,ya-provider,exe-unit,golemsp,gftp} build\n             strip -x build/*\n           elif [ \"$RUNNER_OS\" == \"macOS\" ]; then\n             cp target/debug/{yagna,gftp} build"
    },
    {
      "filename": ".github/workflows/binaries-x86-64.yml",
      "status": "modified",
      "patch": "@@ -10,6 +10,9 @@ on:\n       - master\n       - release/*\n \n+env:\n+  rust_stable: 1.64.0\n+\n jobs:\n   build:\n     name: Build binaries (x86-64)\n@@ -26,11 +29,19 @@ jobs:\n       - name: Checkout\n         uses: actions/checkout@v1\n \n-      - name: Install last stable Rust\n+      - name: Musl\n+        run: |\n+          sudo apt-get install musl musl-tools\n+\n+          musl-gcc -v\n+\n+      - name: Install Rust ${{ env.rust_stable }}\n         uses: actions-rs/toolchain@v1\n         with:\n-          toolchain: stable\n+          toolchain: ${{ env.rust_stable }}\n           components: rustfmt, clippy\n+          target: x86_64-unknown-linux-musl\n+          override: true\n \n       - name: Check lockfile\n         uses: actions-rs/cargo@v1\n@@ -46,17 +57,19 @@ jobs:\n           vcpkg integrate install\n \n       - name: Build binaries\n-        uses: actions-rs/cargo@v1\n-        with:\n-          command: build\n-          args: --workspace --features central-net\n+        run: |\n+          cargo build --features \"static-openssl central-net\" --target x86_64-unknown-linux-musl\n+          (cd core/gftp && cargo build --bin gftp -p gftp --features bin --target x86_64-unknown-linux-musl)\n+          (cd golem_cli && cargo build --bin golemsp -p golemsp --target x86_64-unknown-linux-musl)\n+          (cd agent/provider && cargo build --bin ya-provider -p ya-provider --target x86_64-unknown-linux-musl)\n+          (cd exe-unit && cargo build --bin exe-unit -p ya-exe-unit --features openssl/vendored --target x86_64-unknown-linux-musl)\n \n       - name: Copy binaries\n         shell: bash\n         run: |\n           mkdir build\n           if [ \"$RUNNER_OS\" == \"Linux\" ]; then\n-            cp target/debug/{yagna,ya-provider,exe-unit,golemsp,gftp} build\n+            cp target/x86_64-unknown-linux-musl/debug/{yagna,ya-provider,exe-unit,golemsp,gftp} build\n             strip -x build/*\n           elif [ \"$RUNNER_OS\" == \"macOS\" ]; then\n             cp target/debug/{yagna,gftp} build"
    },
    {
      "filename": ".github/workflows/market-test-suite.yml",
      "status": "modified",
      "patch": "@@ -10,6 +10,9 @@ on:\n       - master\n       - release/*\n \n+env:\n+  rust_stable: 1.64.0\n+\n jobs:\n   build:\n     name: Market Test Suite\n@@ -26,10 +29,10 @@ jobs:\n       - name: Checkout\n         uses: actions/checkout@v1\n \n-      - name: Install last stable Rust\n+      - name: Install Rust ${{ env.rust_stable }}\n         uses: actions-rs/toolchain@v1\n         with:\n-          toolchain: stable\n+          toolchain: ${{ env.rust_stable }}\n           components: rustfmt, clippy\n \n       - name: Check lockfile"
    },
    {
      "filename": ".github/workflows/release.yml",
      "status": "modified",
      "patch": "@@ -5,6 +5,9 @@ on:\n       - v*\n       - pre-rel-*\n \n+env:\n+  rust_stable: 1.64.0\n+\n jobs:\n   create-release:\n     name: Create release\n@@ -86,11 +89,11 @@ jobs:\n       - uses: actions-rs/toolchain@v1\n         if: matrix.os != 'ubuntu'\n         with:\n-          toolchain: stable\n+          toolchain: ${{ env.rust_stable }}\n       - uses: actions-rs/toolchain@v1\n         if: matrix.os == 'ubuntu'\n         with:\n-          toolchain: stable\n+          toolchain: ${{ env.rust_stable }}\n           target: x86_64-unknown-linux-musl\n           override: true\n       - name: Build macos"
    },
    {
      "filename": ".github/workflows/unit-test-sgx.yml",
      "status": "modified",
      "patch": "@@ -11,6 +11,9 @@ on:\n       - release/*\n       - sgx/*\n \n+env:\n+  rust_stable: 1.64.0\n+\n jobs:\n   build:\n     name: SGX Unit Tests\n@@ -26,10 +29,10 @@ jobs:\n       - name: Checkout\n         uses: actions/checkout@v1\n \n-      - name: Install last stable Rust\n+      - name: Install Rust ${{ env.rust_stable }}\n         uses: actions-rs/toolchain@v1\n         with:\n-          toolchain: stable\n+          toolchain: ${{ env.rust_stable }}\n \n       - name: Unit tests for SGX\n         working-directory: exe-unit"
    },
    {
      "filename": "docs/development-plan.md",
      "status": "modified",
      "patch": "@@ -73,7 +73,7 @@ https://phauer.com/2018/code-review-guidelines/\n \n ### Automatic Builds\n \n-The project artifacts (i.e. installation packages and standalone/portable binaries) \n+The project artifacts (i.e. installation packages and standalone/portable binaries)\n should automatically build in Jenkins for every supported operating system (Linux, macOS, Windows).\n \n ### Bug Reporting\n@@ -85,7 +85,7 @@ Bugs should be reported in GitHub Issues.\n ### Technology Stack\n \n The programming language used in this project will be Rust (https://www.rust-lang.org/).\n-The newest stable version of Rust compiler (`rustc`) should compile all source code without errors.\n+The 1.64.0 stable version of Rust compiler (`rustc`) should compile all source code without errors.\n \n For HTTP client/server code, Actix Web 1.0 (https://actix.rs) will be used.\n \n@@ -126,7 +126,7 @@ The dependencies should not be spontaneously updated by developers.\n \n ### Usage Examples\n \n-If a crate needs usage examples, they should be placed in the `examples` subdirectory of the crate. To run such example, \n+If a crate needs usage examples, they should be placed in the `examples` subdirectory of the crate. To run such example,\n please run `cargo run -p <package name> --example <example name>` command.\n \n ### Tests"
    },
    {
      "filename": "goth_tests/poetry.lock",
      "status": "modified",
      "patch": "@@ -269,11 +269,11 @@ python-versions = \"*\"\n \n [[package]]\n name = \"dpath\"\n-version = \"2.0.6\"\n+version = \"2.0.8\"\n description = \"Filesystem-like pathing and searching for dictionaries\"\n category = \"main\"\n optional = false\n-python-versions = \">=3\"\n+python-versions = \">=3.7\"\n \n [[package]]\n name = \"fastcore\"\n@@ -617,7 +617,7 @@ python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"\n \n [[package]]\n name = \"pathspec\"\n-version = \"0.10.1\"\n+version = \"0.10.2\"\n description = \"Utility library for gitignore style pattern matching of file paths.\"\n category = \"dev\"\n optional = false\n@@ -789,17 +789,29 @@ testing = [\"argcomplete\", \"hypothesis (>=3.56)\", \"mock\", \"nose\", \"requests\", \"xm\n \n [[package]]\n name = \"pytest-asyncio\"\n-version = \"0.14.0\"\n-description = \"Pytest support for asyncio.\"\n+version = \"0.20.2\"\n+description = \"Pytest support for asyncio\"\n category = \"main\"\n optional = false\n-python-versions = \">= 3.5\"\n+python-versions = \">=3.7\"\n \n [package.dependencies]\n-pytest = \">=5.4.0\"\n+pytest = \">=6.1.0\"\n \n [package.extras]\n-testing = [\"async-generator (>=1.3)\", \"coverage\", \"hypothesis (>=5.7.1)\"]\n+testing = [\"coverage (>=6.2)\", \"flaky (>=3.5.0)\", \"hypothesis (>=5.7.1)\", \"mypy (>=0.931)\", \"pytest-trio (>=0.7.0)\"]\n+\n+[[package]]\n+name = \"pytest-rerunfailures\"\n+version = \"10.3\"\n+description = \"pytest plugin to re-run tests to eliminate flaky failures\"\n+category = \"main\"\n+optional = false\n+python-versions = \">=3.6\"\n+\n+[package.dependencies]\n+packaging = \">=17.1\"\n+pytest = \">=5.3\"\n \n [[package]]\n name = \"python-dateutil\"\n@@ -890,7 +902,7 @@ python-versions = \">=3.5\"\n \n [[package]]\n name = \"setuptools\"\n-version = \"65.5.1\"\n+version = \"65.6.3\"\n description = \"Easily download, build, install, upgrade, and uninstall Python packages\"\n category = \"main\"\n optional = false\n@@ -919,8 +931,8 @@ python-versions = \"*\"\n \n [[package]]\n name = \"texttable\"\n-version = \"1.6.4\"\n-description = \"module for creating simple ASCII tables\"\n+version = \"1.6.7\"\n+description = \"module to create simple ASCII tables\"\n category = \"main\"\n optional = false\n python-versions = \"*\"\n@@ -982,11 +994,11 @@ python-versions = \"*\"\n \n [[package]]\n name = \"urllib3\"\n-version = \"1.26.12\"\n+version = \"1.26.13\"\n description = \"HTTP library with thread-safe connection pooling, file post, and more.\"\n category = \"main\"\n optional = false\n-python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4\"\n+python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*\"\n \n [package.extras]\n brotli = [\"brotli (>=1.0.9)\", \"brotlicffi (>=0.8.0)\", \"brotlipy (>=0.6.0)\"]\n@@ -1071,7 +1083,7 @@ python-versions = \"*\"\n [metadata]\n lock-version = \"1.1\"\n python-versions = \"^3.8.0\"\n-content-hash = \"cc5966c072e9037f5a79dc21e18c3b5b50025d5a87befe63b021d75520f9c203\"\n+content-hash = \"0ae3d50fbe13355544c6bf89ca3ff7a971e51fcaf530220b0d479c98b5b1f2cb\"\n \n [metadata.files]\n aiohttp = [\n@@ -1358,8 +1370,8 @@ docopt = [\n     {file = \"docopt-0.6.2.tar.gz\", hash = \"sha256:49b3a825280bd66b3aa83585ef59c4a8c82f2c8a522dbe754a8bc8d08c85c491\"},\n ]\n dpath = [\n-    {file = \"dpath-2.0.6-py3-none-any.whl\", hash = \"sha256:8c439bb1c3b3222427e9b8812701cd99a0ef3415ddbb7c03a2379f6989a03965\"},\n-    {file = \"dpath-2.0.6.tar.gz\", hash = \"sha256:5a1ddae52233fbc8ef81b15fb85073a81126bb43698d3f3a1b6aaf561a46cdc0\"},\n+    {file = \"dpath-2.0.8-py3-none-any.whl\", hash = \"sha256:f92f595214dd93a00558d75d4b858beee519f4cffca87f02616ad6cd013f3436\"},\n+    {file = \"dpath-2.0.8.tar.gz\", hash = \"sha256:a3440157ebe80d0a3ad794f1b61c571bef125214800ffdb9afc9424e8250fe9b\"},\n ]\n fastcore = [\n     {file = \"fastcore-1.5.27-py3-none-any.whl\", hash = \"sha256:79dffaa3de96066e4d7f2b8793f1a8a9468c82bc97d3d48ec002de34097b2a9f\"},\n@@ -1646,8 +1658,8 @@ pastel = [\n     {file = \"pastel-0.2.1.tar.gz\", hash = \"sha256:e6581ac04e973cac858828c6202c1e1e81fee1dc7de7683f3e1ffe0bfd8a573d\"},\n ]\n pathspec = [\n-    {file = \"pathspec-0.10.1-py3-none-any.whl\", hash = \"sha256:46846318467efc4556ccfd27816e004270a9eeeeb4d062ce5e6fc7a87c573f93\"},\n-    {file = \"pathspec-0.10.1.tar.gz\", hash = \"sha256:7ace6161b621d31e7902eb6b5ae148d12cfd23f4a249b9ffb6b9fee12084323d\"},\n+    {file = \"pathspec-0.10.2-py3-none-any.whl\", hash = \"sha256:88c2606f2c1e818b978540f73ecc908e13999c6c3a383daf3705652ae79807a5\"},\n+    {file = \"pathspec-0.10.2.tar.gz\", hash = \"sha256:8f6bf73e5758fd365ef5d58ce09ac7c27d2833a8d7da51712eac6e27e35141b0\"},\n ]\n pip = [\n     {file = \"pip-22.3.1-py3-none-any.whl\", hash = \"sha256:908c78e6bc29b676ede1c4d57981d490cb892eb45cd8c214ab6298125119e077\"},\n@@ -1753,8 +1765,12 @@ pytest = [\n     {file = \"pytest-6.2.5.tar.gz\", hash = \"sha256:131b36680866a76e6781d13f101efb86cf674ebb9762eb70d3082b6f29889e89\"},\n ]\n pytest-asyncio = [\n-    {file = \"pytest-asyncio-0.14.0.tar.gz\", hash = \"sha256:9882c0c6b24429449f5f969a5158b528f39bde47dc32e85b9f0403965017e700\"},\n-    {file = \"pytest_asyncio-0.14.0-py3-none-any.whl\", hash = \"sha256:2eae1e34f6c68fc0a9dc12d4bea190483843ff4708d24277c41568d6b6044f1d\"},\n+    {file = \"pytest-asyncio-0.20.2.tar.gz\", hash = \"sha256:32a87a9836298a881c0ec637ebcc952cfe23a56436bdc0d09d1511941dd8a812\"},\n+    {file = \"pytest_asyncio-0.20.2-py3-none-any.whl\", hash = \"sha256:07e0abf9e6e6b95894a39f688a4a875d63c2128f76c02d03d16ccbc35bcc0f8a\"},\n+]\n+pytest-rerunfailures = [\n+    {file = \"pytest-rerunfailures-10.3.tar.gz\", hash = \"sha256:d8244d799f89a6edb5e57301ddaeb3b6f10d6691638d51e80b371311592e28c6\"},\n+    {file = \"pytest_rerunfailures-10.3-py3-none-any.whl\", hash = \"sha256:6be6f96510bf94b54198bf15bc5568fe2cdff88e83875912e22d29810acf65ff\"},\n ]\n python-dateutil = [\n     {file = \"python-dateutil-2.8.2.tar.gz\", hash = \"sha256:0123cacc1627ae19ddf3c27a5de5bd67ee4586fbdd6440d9748f8abb483d3e86\"},\n@@ -1943,8 +1959,8 @@ ruamel-yaml-clib = [\n     {file = \"ruamel.yaml.clib-0.2.7.tar.gz\", hash = \"sha256:1f08fd5a2bea9c4180db71678e850b995d2a5f4537be0e94557668cf0f5f9497\"},\n ]\n setuptools = [\n-    {file = \"setuptools-65.5.1-py3-none-any.whl\", hash = \"sha256:d0b9a8433464d5800cbe05094acf5c6d52a91bfac9b52bcfc4d41382be5d5d31\"},\n-    {file = \"setuptools-65.5.1.tar.gz\", hash = \"sha256:e197a19aa8ec9722928f2206f8de752def0e4c9fc6953527360d1c36d94ddb2f\"},\n+    {file = \"setuptools-65.6.3-py3-none-any.whl\", hash = \"sha256:57f6f22bde4e042978bcd50176fdb381d7c21a9efa4041202288d3737a0c6a54\"},\n+    {file = \"setuptools-65.6.3.tar.gz\", hash = \"sha256:a7620757bf984b58deaf32fc8a4577a9bbc0850cf92c20e1ce41c38c19e5fb75\"},\n ]\n six = [\n     {file = \"six-1.16.0-py2.py3-none-any.whl\", hash = \"sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\"},\n@@ -1955,8 +1971,8 @@ sortedcontainers = [\n     {file = \"sortedcontainers-2.2.2.tar.gz\", hash = \"sha256:4e73a757831fc3ca4de2859c422564239a31d8213d09a2a666e375807034d2ba\"},\n ]\n texttable = [\n-    {file = \"texttable-1.6.4-py2.py3-none-any.whl\", hash = \"sha256:dd2b0eaebb2a9e167d1cefedab4700e5dcbdb076114eed30b58b97ed6b37d6f2\"},\n-    {file = \"texttable-1.6.4.tar.gz\", hash = \"sha256:42ee7b9e15f7b225747c3fa08f43c5d6c83bc899f80ff9bae9319334824076e9\"},\n+    {file = \"texttable-1.6.7-py2.py3-none-any.whl\", hash = \"sha256:b7b68139aa8a6339d2c320ca8b1dc42d13a7831a346b446cb9eb385f0c76310c\"},\n+    {file = \"texttable-1.6.7.tar.gz\", hash = \"sha256:290348fb67f7746931bcdfd55ac7584ecd4e5b0846ab164333f0794b121760f2\"},\n ]\n toml = [\n     {file = \"toml-0.10.2-py2.py3-none-any.whl\", hash = \"sha256:806143ae5bfb6a3c6e736a764057db0e6a0e05e338b5630894a5f779cabb4f9b\"},\n@@ -2021,8 +2037,8 @@ typing-extensions = [\n     {file = \"typing_extensions-3.10.0.2.tar.gz\", hash = \"sha256:49f75d16ff11f1cd258e1b988ccff82a3ca5570217d7ad8c5f48205dd99a677e\"},\n ]\n urllib3 = [\n-    {file = \"urllib3-1.26.12-py2.py3-none-any.whl\", hash = \"sha256:b930dd878d5a8afb066a637fbb35144fe7901e3b209d1cd4f524bd0e9deee997\"},\n-    {file = \"urllib3-1.26.12.tar.gz\", hash = \"sha256:3fa96cf423e6987997fc326ae8df396db2a8b7c667747d47ddd8ecba91f4a74e\"},\n+    {file = \"urllib3-1.26.13-py2.py3-none-any.whl\", hash = \"sha256:47cc05d99aaa09c9e72ed5809b60e7ba354e64b59c9c173ac3018642d8bb41fc\"},\n+    {file = \"urllib3-1.26.13.tar.gz\", hash = \"sha256:c083dd0dce68dbfbe1129d5271cb90f9447dea7d52097c6e0126120c521ddea8\"},\n ]\n urwid = [\n     {file = \"urwid-2.1.2.tar.gz\", hash = \"sha256:588bee9c1cb208d0906a9f73c613d2bd32c3ed3702012f51efe318a3f2127eae\"},"
    },
    {
      "filename": "goth_tests/pyproject.toml",
      "status": "modified",
      "patch": "@@ -19,7 +19,8 @@ readme = \"README.md\"\n [tool.poetry.dependencies]\n python = \"^3.8.0\"\n pytest = \"^6.2\"\n-pytest-asyncio = \"^0.14\"\n+pytest-asyncio = \"^0.20.2\"\n+pytest-rerunfailures = \"^10.3\"\n #goth = \"^0.11\"\n # to use development goth version uncomment below\n goth =  { git = \"https://github.com/golemfactory/goth.git\", rev = \"e81663ab5f220abf4dd497dec735c3ec73702351\" }\n@@ -32,6 +33,6 @@ poethepoet = \"^0.10.0\"\n [tool.poe.tasks]\n codestyle = \"black --check --diff .\"\n goth-assets = \"python -m goth create-assets assets\"\n-goth-tests = \"pytest -svx .\"\n+goth-tests = \"pytest -svx . --reruns 3 --only-rerun AssertionError --only-rerun TimeoutError --only-rerun ApiException --only-rerun goth.runner.exceptions.TemporalAssertionError --only-rerun urllib.error.URLError --only-rerun goth.runner.exceptions.CommandError\"\n provider-tests = \"pytest -svx ./domain/ya-provider\"\n typecheck = \"mypy .\""
    },
    {
      "filename": "rust-toolchain.toml",
      "status": "added",
      "patch": "@@ -0,0 +1,4 @@\n+[toolchain]\n+channel = \"1.64.0\"\n+components = [ \"rustfmt\", \"clippy\" ]\n+targets = [ \"x86_64-linux-musl\" ]"
    },
    {
      "filename": "utils/agreement-utils/src/agreement.rs",
      "status": "modified",
      "patch": "@@ -316,7 +316,7 @@ impl TypedArrayPointer for Option<&Value> {\n }\n \n pub fn try_from_path(path: &PathBuf) -> Result<Value, Error> {\n-    let contents = std::fs::read_to_string(&path).map_err(Error::from)?;\n+    let contents = std::fs::read_to_string(path).map_err(Error::from)?;\n     let ext = match path.extension().and_then(|e| e.to_str()) {\n         Some(ext) => ext,\n         None => DEFAULT_FORMAT,"
    }
  ],
  "fix_category": NaN,
  "root_cause_category": NaN,
  "root_cause_subcategory": "!Rust (CI)"
}