{
  "id": 80,
  "repo": "quinn",
  "issue_url": "https://github.com/quinn-rs/quinn/issues/1628",
  "pr_url": "https://github.com/quinn-rs/quinn/pull/1639",
  "issue_description": "`PendingAcks::reordering_threshold` defaults to 1. This causes an ACK to be sent immediately when a packet number is skipped:\r\n\r\nhttps://github.com/quinn-rs/quinn/blob/8076ffe94d38813ce0220af9d3438e7bfb5e8429/quinn-proto/src/connection/spaces.rs#L607-L609\r\n\r\nAs of #1613, we can randomly skip packet numbers, especially early in a connection. This causes a few extra ACKs to be sent at unpredictable times. This causes tests which count the number of ACKs sent in an interval to fail. We should modify such tests to use a reordering threshold greater than 1 to prevent these extra ACKs from being sent, or perhaps expose the number of skipped packets to allow them to account for the induced ACKs.",
  "files_changed": [
    {
      "filename": "quinn-proto/src/config.rs",
      "status": "modified",
      "patch": "@@ -47,6 +47,8 @@ pub struct TransportConfig {\n     pub(crate) allow_spin: bool,\n     pub(crate) datagram_receive_buffer_size: Option<usize>,\n     pub(crate) datagram_send_buffer_size: usize,\n+    #[cfg(test)]\n+    pub(crate) deterministic_packet_numbers: bool,\n \n     pub(crate) congestion_controller_factory: Box<dyn congestion::ControllerFactory + Send + Sync>,\n }\n@@ -266,6 +268,16 @@ impl TransportConfig {\n         self\n     }\n \n+    /// Whether to force every packet number to be used\n+    ///\n+    /// By default, packet numbers are occasionally skipped to ensure peers aren't ACKing packets\n+    /// before they see them.\n+    #[cfg(test)]\n+    pub(crate) fn deterministic_packet_numbers(&mut self, enabled: bool) -> &mut Self {\n+        self.deterministic_packet_numbers = enabled;\n+        self\n+    }\n+\n     /// How to construct new `congestion::Controller`s\n     ///\n     /// Typically the refcounted configuration of a `congestion::Controller`,\n@@ -317,6 +329,8 @@ impl Default for TransportConfig {\n             allow_spin: true,\n             datagram_receive_buffer_size: Some(STREAM_RWND as usize),\n             datagram_send_buffer_size: 1024 * 1024,\n+            #[cfg(test)]\n+            deterministic_packet_numbers: false,\n \n             congestion_controller_factory: Box::new(Arc::new(congestion::CubicConfig::default())),\n         }"
    },
    {
      "filename": "quinn-proto/src/connection/mod.rs",
      "status": "modified",
      "patch": "@@ -326,6 +326,12 @@ impl Connection {\n             authentication_failures: 0,\n             error: None,\n             retry_token: Bytes::new(),\n+            #[cfg(test)]\n+            packet_number_filter: match config.deterministic_packet_numbers {\n+                false => PacketNumberFilter::new(&mut rng),\n+                true => PacketNumberFilter::disabled(),\n+            },\n+            #[cfg(not(test))]\n             packet_number_filter: PacketNumberFilter::new(&mut rng),\n \n             path_response: None,"
    },
    {
      "filename": "quinn-proto/src/connection/spaces.rs",
      "status": "modified",
      "patch": "@@ -726,6 +726,15 @@ impl PacketNumberFilter {\n         }\n     }\n \n+    #[cfg(test)]\n+    pub(super) fn disabled() -> Self {\n+        Self {\n+            next_skipped_packet_number: u64::MAX,\n+            prev_skipped_packet_number: None,\n+            exponent: u32::MAX,\n+        }\n+    }\n+\n     pub(super) fn peek(&self, space: &PacketSpace) -> u64 {\n         let n = space.next_packet_number;\n         if n != self.next_skipped_packet_number {"
    },
    {
      "filename": "quinn-proto/src/tests/mod.rs",
      "status": "modified",
      "patch": "@@ -2212,8 +2212,8 @@ fn packet_splitting_not_necessary_after_higher_mtu_discovered() {\n #[test]\n fn single_ack_eliciting_packet_triggers_ack_after_delay() {\n     let _guard = subscribe();\n-    let mut pair = Pair::default();\n-    let (client_ch, _) = pair.connect();\n+    let mut pair = Pair::default_with_deterministic_pns();\n+    let (client_ch, _) = pair.connect_with(client_config_with_deterministic_pns());\n     pair.drive();\n \n     let stats_after_connect = pair.client_conn_mut(client_ch).stats();\n@@ -2275,8 +2275,8 @@ fn single_ack_eliciting_packet_triggers_ack_after_delay() {\n #[test]\n fn immediate_ack_triggers_ack() {\n     let _guard = subscribe();\n-    let mut pair = Pair::default();\n-    let (client_ch, _) = pair.connect();\n+    let mut pair = Pair::default_with_deterministic_pns();\n+    let (client_ch, _) = pair.connect_with(client_config_with_deterministic_pns());\n     pair.drive();\n \n     let acks_after_connect = pair.client_conn_mut(client_ch).stats().frame_rx.acks;\n@@ -2294,8 +2294,8 @@ fn immediate_ack_triggers_ack() {\n #[test]\n fn out_of_order_ack_eliciting_packet_triggers_ack() {\n     let _guard = subscribe();\n-    let mut pair = Pair::default();\n-    let (client_ch, server_ch) = pair.connect();\n+    let mut pair = Pair::default_with_deterministic_pns();\n+    let (client_ch, server_ch) = pair.connect_with(client_config_with_deterministic_pns());\n     pair.drive();\n \n     let default_mtu = pair.mtu;\n@@ -2352,8 +2352,8 @@ fn out_of_order_ack_eliciting_packet_triggers_ack() {\n #[test]\n fn single_ack_eliciting_packet_with_ce_bit_triggers_immediate_ack() {\n     let _guard = subscribe();\n-    let mut pair = Pair::default();\n-    let (client_ch, _) = pair.connect();\n+    let mut pair = Pair::default_with_deterministic_pns();\n+    let (client_ch, _) = pair.connect_with(client_config_with_deterministic_pns());\n     pair.drive();\n \n     let stats_after_connect = pair.client_conn_mut(client_ch).stats();\n@@ -2388,7 +2388,7 @@ fn single_ack_eliciting_packet_with_ce_bit_triggers_immediate_ack() {\n }\n \n fn setup_ack_frequency_test(max_ack_delay: Duration) -> (Pair, ConnectionHandle, ConnectionHandle) {\n-    let mut client_config = client_config();\n+    let mut client_config = client_config_with_deterministic_pns();\n     let mut ack_freq_config = AckFrequencyConfig::default();\n     ack_freq_config\n         .ack_eliciting_threshold(10u32.into())\n@@ -2398,7 +2398,7 @@ fn setup_ack_frequency_test(max_ack_delay: Duration) -> (Pair, ConnectionHandle,\n         .ack_frequency_config(Some(ack_freq_config))\n         .mtu_discovery_config(None); // To keep traffic cleaner\n \n-    let mut pair = Pair::default();\n+    let mut pair = Pair::default_with_deterministic_pns();\n     pair.latency = Duration::from_millis(10); // Need latency to avoid an RTT = 0\n     let (client_ch, server_ch) = pair.connect_with(client_config);\n     pair.drive();"
    },
    {
      "filename": "quinn-proto/src/tests/util.rs",
      "status": "modified",
      "patch": "@@ -37,6 +37,14 @@ pub(super) struct Pair {\n }\n \n impl Pair {\n+    pub(super) fn default_with_deterministic_pns() -> Self {\n+        let mut cfg = server_config();\n+        let mut transport = TransportConfig::default();\n+        transport.deterministic_packet_numbers(true);\n+        cfg.transport = Arc::new(transport);\n+        Self::new(Default::default(), cfg)\n+    }\n+\n     pub(super) fn new(endpoint_config: Arc<EndpointConfig>, server_config: ServerConfig) -> Self {\n         let server = Endpoint::new(endpoint_config.clone(), Some(Arc::new(server_config)), true);\n         let client = Endpoint::new(endpoint_config, None, true);\n@@ -466,6 +474,14 @@ pub(super) fn client_config() -> ClientConfig {\n     ClientConfig::new(Arc::new(client_crypto()))\n }\n \n+pub(super) fn client_config_with_deterministic_pns() -> ClientConfig {\n+    let mut cfg = ClientConfig::new(Arc::new(client_crypto()));\n+    let mut transport = TransportConfig::default();\n+    transport.deterministic_packet_numbers(true);\n+    cfg.transport = Arc::new(transport);\n+    cfg\n+}\n+\n pub(super) fn client_config_with_certs(certs: Vec<rustls::Certificate>) -> ClientConfig {\n     ClientConfig::new(Arc::new(client_crypto_with_certs(certs)))\n }"
    }
  ],
  "fix_category": "Conditionally remove randomness",
  "root_cause_category": "Randomness",
  "root_cause_subcategory": "RNG"
}