{
  "id": 84,
  "repo": "deltachat-core-rust",
  "issue_url": "https://github.com/deltachat/deltachat-core-rust/issues/5470",
  "pr_url": "https://github.com/deltachat/deltachat-core-rust/pull/5471",
  "issue_description": "cc @Simon-Laux \r\n\r\nStill not fixed. I fixed python docs by pinning sphinx meanwhile.\r\n\r\nHere is a test failure: https://github.com/deltachat/deltachat-core-rust/actions/runs/8721401263/job/23925048947",
  "files_changed": [
    {
      "filename": "python/tox.ini",
      "status": "modified",
      "patch": "@@ -63,7 +63,7 @@ commands =\n changedir=doc\n deps =\n # Pinned version, workaround for <https://github.com/breathe-doc/breathe/issues/981>\n-    sphinx==7.2.6\n+    sphinx<7.3\n     breathe\n     sphinx_rtd_theme\n commands ="
    },
    {
      "filename": "src/events/chatlist_events.rs",
      "status": "modified",
      "patch": "@@ -181,7 +181,7 @@ mod test_chatlist_events {\n             .await?;\n         set_muted(&bob, bob_chat.id, MuteDuration::Forever).await?;\n \n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n \n         let sent_msg = alice.send_text(chat.id, \"moin2\").await;\n         bob.recv_msg(&sent_msg).await;\n@@ -216,7 +216,7 @@ mod test_chatlist_events {\n         let sent_msg = alice.send_text(chat.id, \"moin2\").await;\n         bob.recv_msg(&sent_msg).await;\n \n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         chat::marknoticed_chat(&bob, DC_CHAT_ID_ARCHIVED_LINK).await?;\n         wait_for_chatlist_specific_item(&bob, DC_CHAT_ID_ARCHIVED_LINK).await;\n \n@@ -233,7 +233,7 @@ mod test_chatlist_events {\n         let sent_msg = alice.send_text(alice_to_bob_chat.id, \"hello\").await;\n         bob.recv_msg(&sent_msg).await;\n \n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         // set alice name then receive messagefrom her with bob\n         alice.set_config(Config::Displayname, Some(\"Alice\")).await?;\n         let sent_msg = alice\n@@ -245,7 +245,7 @@ mod test_chatlist_events {\n \n         wait_for_chatlist_all_items(&bob).await;\n \n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         // set name\n         let addr = alice_on_bob.get_addr();\n         Contact::create(&bob, \"Alice2\", addr).await?;\n@@ -266,7 +266,7 @@ mod test_chatlist_events {\n         let sent_msg = alice.send_text(alice_to_bob_chat.id, \"hello\").await;\n         bob.recv_msg(&sent_msg).await;\n \n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         // set alice avatar then receive messagefrom her with bob\n         let file = alice.dir.path().join(\"avatar.png\");\n         let bytes = include_bytes!(\"../../test-data/image/avatar64x64.png\");\n@@ -292,7 +292,7 @@ mod test_chatlist_events {\n         let alice = tcm.alice().await;\n         let chat = create_group_chat(&alice, ProtectionStatus::Protected, \"My Group\").await?;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         chat.delete(&alice).await?;\n         wait_for_chatlist(&alice).await;\n         Ok(())\n@@ -303,7 +303,7 @@ mod test_chatlist_events {\n     async fn test_create_group_chat() -> Result<()> {\n         let mut tcm = TestContextManager::new();\n         let alice = tcm.alice().await;\n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         let chat = create_group_chat(&alice, ProtectionStatus::Protected, \"My Group\").await?;\n         wait_for_chatlist_and_specific_item(&alice, chat).await;\n         Ok(())\n@@ -314,7 +314,7 @@ mod test_chatlist_events {\n     async fn test_create_broadcastlist() -> Result<()> {\n         let mut tcm = TestContextManager::new();\n         let alice = tcm.alice().await;\n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         create_broadcast_list(&alice).await?;\n         wait_for_chatlist(&alice).await;\n         Ok(())\n@@ -327,11 +327,11 @@ mod test_chatlist_events {\n         let alice = tcm.alice().await;\n         let chat = create_group_chat(&alice, ProtectionStatus::Protected, \"My Group\").await?;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         chat::set_muted(&alice, chat, MuteDuration::Forever).await?;\n         wait_for_chatlist_specific_item(&alice, chat).await;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         chat::set_muted(&alice, chat, MuteDuration::NotMuted).await?;\n         wait_for_chatlist_specific_item(&alice, chat).await;\n \n@@ -352,7 +352,7 @@ mod test_chatlist_events {\n                 .unwrap(),\n         );\n         chat::set_muted(&alice, chat, mute_duration).await?;\n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         SystemTime::shift(Duration::from_secs(3));\n         wait_for_chatlist_specific_item(&alice, chat).await;\n \n@@ -366,7 +366,7 @@ mod test_chatlist_events {\n         let alice = tcm.alice().await;\n         let chat = create_group_chat(&alice, ProtectionStatus::Protected, \"My Group\").await?;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         chat::set_chat_name(&alice, chat, \"New Name\").await?;\n         wait_for_chatlist_specific_item(&alice, chat).await;\n \n@@ -380,7 +380,7 @@ mod test_chatlist_events {\n         let alice = tcm.alice().await;\n         let chat = create_group_chat(&alice, ProtectionStatus::Protected, \"My Group\").await?;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         let file = alice.dir.path().join(\"avatar.png\");\n         let bytes = include_bytes!(\"../../test-data/image/avatar64x64.png\");\n         tokio::fs::write(&file, bytes).await?;\n@@ -405,7 +405,7 @@ mod test_chatlist_events {\n         wait_for_chatlist_specific_item(&bob, chat_id_for_bob).await;\n         chat_id_for_bob.accept(&bob).await?;\n \n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         chat::set_chat_name(&alice, chat, \"New Name\").await?;\n         let sent_msg = alice.send_text(chat, \"Hello\").await;\n         bob.recv_msg(&sent_msg).await;\n@@ -426,7 +426,7 @@ mod test_chatlist_events {\n         let sent_msg = alice.send_text(chat, \"Hello\").await;\n         let chat_id_for_bob = bob.recv_msg(&sent_msg).await.chat_id;\n \n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         chat_id_for_bob.accept(&bob).await?;\n         wait_for_chatlist_specific_item(&bob, chat_id_for_bob).await;\n \n@@ -445,7 +445,7 @@ mod test_chatlist_events {\n         let sent_msg = alice.send_text(chat, \"Hello\").await;\n         let chat_id_for_bob = bob.recv_msg(&sent_msg).await.chat_id;\n \n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         chat_id_for_bob.block(&bob).await?;\n         wait_for_chatlist(&bob).await;\n \n@@ -460,7 +460,7 @@ mod test_chatlist_events {\n         let chat = create_group_chat(&alice, ProtectionStatus::Protected, \"My Group\").await?;\n         let message = chat::send_text_msg(&alice, chat, \"Hello World\".to_owned()).await?;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         message::delete_msgs(&alice, &[message]).await?;\n         wait_for_chatlist_specific_item(&alice, chat).await;\n \n@@ -485,7 +485,7 @@ mod test_chatlist_events {\n         let chat_id_for_bob = bob.recv_msg(&sent_msg).await.chat_id;\n         assert!(chat_id_for_bob.get_fresh_msg_cnt(&bob).await? >= 1);\n \n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         chat::marknoticed_chat(&bob, chat_id_for_bob).await?;\n         wait_for_chatlist_specific_item(&bob, chat_id_for_bob).await;\n \n@@ -500,29 +500,36 @@ mod test_chatlist_events {\n         let contact_id = Contact::create(&alice, \"example\", \"example@example.com\").await?;\n         let _ = ChatId::create_for_contact(&alice, contact_id).await;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         Contact::block(&alice, contact_id).await?;\n         wait_for_chatlist(&alice).await;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         Contact::unblock(&alice, contact_id).await?;\n         wait_for_chatlist(&alice).await;\n \n         Ok(())\n     }\n \n-    /// ephemeral / disappearing messages\n+    /// Tests that expired disappearing message\n+    /// produces events about chatlist being modified.\n     #[tokio::test(flavor = \"multi_thread\", worker_threads = 2)]\n     async fn test_update_after_ephemeral_messages() -> Result<()> {\n         let mut tcm = TestContextManager::new();\n         let alice = tcm.alice().await;\n         let chat = create_group_chat(&alice, ProtectionStatus::Protected, \"My Group\").await?;\n-        chat.set_ephemeral_timer(&alice, crate::ephemeral::Timer::Enabled { duration: 1 })\n+        chat.set_ephemeral_timer(&alice, crate::ephemeral::Timer::Enabled { duration: 60 })\n             .await?;\n+        alice\n+            .evtracker\n+            .get_matching(|evt| matches!(evt, EventType::ChatEphemeralTimerModified { .. }))\n+            .await;\n+\n         let _ = chat::send_text_msg(&alice, chat, \"Hello\".to_owned()).await?;\n+        wait_for_chatlist_and_specific_item(&alice, chat).await;\n \n-        alice.evtracker.clear_events();\n-        SystemTime::shift(Duration::from_secs(3));\n+        SystemTime::shift(Duration::from_secs(70));\n+        crate::ephemeral::delete_expired_messages(&alice, crate::tools::time()).await?;\n         wait_for_chatlist_and_specific_item(&alice, chat).await;\n \n         Ok(())\n@@ -540,7 +547,7 @@ Content-Type: text/plain; charset=utf-8; format=flowed; delsp=no\n \n First thread.\"#;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         receive_imf(&alice, mime, false).await?;\n         wait_for_chatlist(&alice).await;\n \n@@ -561,34 +568,34 @@ First thread.\"#;\n         let qr = get_securejoin_qr(&alice.ctx, Some(alice_chatid)).await?;\n \n         // Step 2: Bob scans QR-code, sends vg-request\n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         let bob_chatid = join_securejoin(&bob.ctx, &qr).await?;\n         wait_for_chatlist(&bob).await;\n \n         let sent = bob.pop_sent_msg().await;\n \n         // Step 3: Alice receives vg-request, sends vg-auth-required\n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         alice.recv_msg_trash(&sent).await;\n \n         let sent = alice.pop_sent_msg().await;\n \n         // Step 4: Bob receives vg-auth-required, sends vg-request-with-auth\n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         bob.recv_msg_trash(&sent).await;\n         wait_for_chatlist_and_specific_item(&bob, bob_chatid).await;\n \n         let sent = bob.pop_sent_msg().await;\n \n         // Step 5+6: Alice receives vg-request-with-auth, sends vg-member-added\n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         alice.recv_msg_trash(&sent).await;\n         wait_for_chatlist_and_specific_item(&alice, alice_chatid).await;\n \n         let sent = alice.pop_sent_msg().await;\n \n         // Step 7: Bob receives vg-member-added\n-        bob.evtracker.clear_events();\n+        bob.evtracker.clear_events().await;\n         bob.recv_msg(&sent).await;\n         wait_for_chatlist_and_specific_item(&bob, bob_chatid).await;\n \n@@ -610,7 +617,7 @@ First thread.\"#;\n         let message = Message::load_from_db(&alice, msg_id).await?;\n         assert_eq!(message.get_state(), MessageState::OutDelivered);\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         chat::resend_msgs(&alice, &[msg_id]).await?;\n         wait_for_chatlist_specific_item(&alice, chat).await;\n \n@@ -626,7 +633,7 @@ First thread.\"#;\n         let msg_id = chat::send_text_msg(&alice, chat, \"Hello\".to_owned()).await?;\n         let _ = alice.pop_sent_msg().await;\n \n-        alice.evtracker.clear_events();\n+        alice.evtracker.clear_events().await;\n         reaction::send_reaction(&alice, msg_id, \"\ud83d\udc4d\").await?;\n         let _ = alice.pop_sent_msg().await;\n         wait_for_chatlist_specific_item(&alice, chat).await;"
    },
    {
      "filename": "src/test_utils.rs",
      "status": "modified",
      "patch": "@@ -1025,9 +1025,16 @@ impl EventTracker {\n             .await;\n     }\n \n-    /// Clears event queue\n-    pub fn clear_events(&self) {\n-        while self.try_recv().is_ok() {}\n+    /// Clears event queue.\n+    ///\n+    /// This spends 1 second instead of using `try_recv`\n+    /// to avoid accidentally leaving an event that\n+    /// was emitted right before calling `clear_events()`.\n+    ///\n+    /// Avoid using this function if you can\n+    /// by waiting for specific events you expect to receive.\n+    pub async fn clear_events(&self) {\n+        while let Ok(_ev) = tokio::time::timeout(Duration::from_secs(1), self.recv()).await {}\n     }\n }\n "
    }
  ],
  "fix_category": "Tweak durations",
  "root_cause_category": "Async Wait",
  "root_cause_subcategory": "Sleep"
}