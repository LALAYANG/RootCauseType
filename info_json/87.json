{
  "id": 87,
  "repo": "riker",
  "issue_url": "https://github.com/riker-rs/riker/issues/142",
  "pr_url": "https://github.com/riker-rs/riker/pull/145",
  "issue_description": "I can make a PR that will introduce these (at least on Linux, but can also run a matrix for MacOS and Windows)... For public projects like this one there is no fee for running these workflows...",
  "files_changed": [
    {
      "filename": ".github/workflows/audit.yml",
      "status": "added",
      "patch": "@@ -0,0 +1,26 @@\n+name: Audit\n+\n+on:\n+  schedule:\n+    - cron: '0 0 * * *'\n+  push:\n+    branches:\n+      - master\n+    paths:\n+      - \"**/Cargo.lock\"\n+      - \"**/Cargo.toml\"\n+  pull_request:\n+    branches:\n+      - master\n+    paths:\n+      - \"**/Cargo.lock\"\n+      - \"**/Cargo.toml\"\n+\n+jobs:\n+  audit:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+      - uses: actions-rs/audit-check@v1\n+        with:\n+          token: ${{ secrets.GITHUB_TOKEN }}"
    },
    {
      "filename": ".github/workflows/build-and-test.yml",
      "status": "added",
      "patch": "@@ -0,0 +1,77 @@\n+name: Build and run tests\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master\n+\n+jobs:\n+  build-and-test:\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        project: [./, ./riker-macros/]\n+        os: [ubuntu-latest, macos-latest, windows-latest]\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    - name: Install stable toolchain\n+      uses: actions-rs/toolchain@v1\n+      with:\n+        toolchain: stable\n+        override: true\n+\n+    - name: Get current date\n+      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'\n+      run: echo \"CURRENT_DATE=$(date +'%Y-%m-%d')\" >> $GITHUB_ENV\n+\n+    - name: Get current date\n+      if: matrix.os == 'windows-latest'\n+      run: echo \"CURRENT_DATE=$(Get-Date -Format \"yyyy-MM-dd\")\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8\n+\n+    - name: Cache cargo registry\n+      uses: actions/cache@v2\n+      with:\n+        path: ~/.cargo/registry\n+        # Add date to the cache to keep it up to date\n+        key: ${{ matrix.project }}-${{ matrix.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}-${{ env.CURRENT_DATE }}\n+        # Restore from outdated cache for speed\n+        restore-keys: |\n+          ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}\n+\n+    - name: Cache cargo index\n+      uses: actions/cache@v2\n+      with:\n+        path: ~/.cargo/git\n+        # Add date to the cache to keep it up to date\n+        key: ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.rust }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}-${{ env.CURRENT_DATE }}\n+        # Restore from outdated cache for speed\n+        restore-keys: |\n+          ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.rust }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}\n+\n+    - name: Cache cargo target\n+      uses: actions/cache@v2\n+      with:\n+        path: ${{ matrix.project}}/target\n+        # Add date to the cache to keep it up to date\n+        key: ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}-${{ env.CURRENT_DATE }}\n+        # Restore from outdated cache for speed\n+        restore-keys: |\n+          ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}\n+\n+    - name: Build ${{ matrix.project }}\n+      uses: actions-rs/cargo@v1\n+      with:\n+        command: build\n+        args: --manifest-path=${{ matrix.project }}Cargo.toml --all --release\n+\n+    - name: Run tests for ${{ matrix.project }}\n+      uses: actions-rs/cargo@v1\n+      with:\n+        command: test\n+        args: --manifest-path=${{ matrix.project }}Cargo.toml --all --release"
    },
    {
      "filename": ".github/workflows/pre-commit.yml",
      "status": "added",
      "patch": "@@ -0,0 +1,28 @@\n+name: pre-commit\n+\n+on:\n+  push:\n+    branches:\n+      - master\n+  pull_request:\n+    branches:\n+      - master\n+\n+jobs:\n+  pre-commit:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      max-parallel: 1\n+      matrix:\n+        rust:\n+          - stable\n+    steps:\n+      - uses: actions/checkout@v2\n+      - uses: actions/setup-python@v2\n+      - uses: actions-rs/toolchain@v1\n+        with:\n+          profile: minimal\n+          toolchain: ${{ matrix.rust }}\n+          override: true\n+          components: clippy, rustfmt\n+      - uses: pre-commit/action@v2.0.0"
    },
    {
      "filename": ".pre-commit-config.yaml",
      "status": "modified",
      "patch": "@@ -7,16 +7,17 @@ repos:\n         language: system\n         entry: sh -c 'touch src/lib.rs'\n   - repo: https://github.com/doublify/pre-commit-rust\n-    rev: 14b3e118cfc36fb87d8d9cbd1305a2238fd85868\n+    rev: v1.0\n     hooks:\n       - id: clippy\n+        args: [\"--all-targets\", \"--all-features\", \"--\", \"-D\", \"warnings\"]\n         name: cargo clippy https://github.com/rust-lang/rust-clippy/blob/master/README.md .\n       - id: cargo-check\n         name: cargo check https://doc.rust-lang.org/cargo/commands/cargo-check.html .\n       - id: fmt\n         name: rustfmt https://github.com/rust-lang/rustfmt/blob/master/README.md .\n-  - repo: https://github.com/prettier/prettier.git\n-    rev: 2.1.1\n+  - repo: https://github.com/pre-commit/mirrors-prettier.git\n+    rev: v2.2.0\n     hooks:\n       - id: prettier\n         name: prettier https://prettier.io/docs/en/ ."
    },
    {
      "filename": ".travis.yml",
      "status": "removed",
      "patch": "@@ -1,24 +0,0 @@\n-# verified on https://config.travis-ci.com/explore\n-language: rust\n-os: linux\n-dist: xenial\n-jobs:\n-  fast_finish: true\n-  include:\n-    - rust: stable\n-      script:\n-        - cargo update\n-        - cargo check --all --no-default-features\n-        - cargo test --all-features --all -- --nocapture\n-        - cd riker-macros; cargo test --no-default-features -- --nocapture; cd ..\n-    - name: \"pre-commit\"\n-      before_install:\n-        - curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n-        - sudo apt-get update\n-        - sudo apt-get install -y nodejs\n-        - sudo pip install --upgrade pip\n-        - pip install pre-commit --user\n-        - rustup component add rustfmt --toolchain stable-x86_64-unknown-linux-gnu\n-        - rustup component add clippy --toolchain stable-x86_64-unknown-linux-gnu\n-      script:\n-        - pre-commit run -a"
    },
    {
      "filename": "README.md",
      "status": "modified",
      "patch": "@@ -1,6 +1,6 @@\n # Riker\n \n-[![Build Status](https://travis-ci.org/riker-rs/riker.svg?branch=master)](https://travis-ci.org/riker-rs/riker)\n+[![Build status](https://github.com/riker-rs/riker/workflows/Build%20and%20run%20tests/badge.svg)](https://github.com/riker-rs/riker/actions?query=workflow%3A%22Build+and+run+tests%22)\n [![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n [![crates.io](https://meritbadge.herokuapp.com/riker)](https://crates.io/crates/riker)\n [![Released API docs](https://docs.rs/riker/badge.svg)](https://docs.rs/riker)"
    },
    {
      "filename": "examples/channel.rs",
      "status": "modified",
      "patch": "@@ -26,13 +26,7 @@ impl Actor for GpsActor {\n \n         println!(\"{}: pre_start subscribe to {:?}\", ctx.myself.name(), topic);\n         let sub = Box::new(ctx.myself());\n-        self.chan.tell(\n-            Subscribe {\n-                actor: sub.clone(),\n-                topic,\n-            },\n-            None,\n-        );\n+        self.chan.tell(Subscribe { actor: sub, topic }, None);\n     }\n \n     fn recv(&mut self, ctx: &Context<Self::Msg>, msg: Self::Msg, sender: Sender) {\n@@ -67,13 +61,7 @@ impl Actor for NavigationActor {\n \n         println!(\"{}: pre_start subscribe to {:?}\", ctx.myself.name(), topic);\n         let sub = Box::new(ctx.myself());\n-        self.chan.tell(\n-            Subscribe {\n-                actor: sub.clone(),\n-                topic,\n-            },\n-            None,\n-        );\n+        self.chan.tell(Subscribe { actor: sub, topic }, None);\n     }\n \n     fn recv(&mut self, ctx: &Context<Self::Msg>, msg: Self::Msg, sender: Sender) {"
    },
    {
      "filename": "src/lib.rs",
      "status": "modified",
      "patch": "@@ -4,6 +4,8 @@\n // #![deny(clippy::nursery)]\n #![allow(clippy::new_ret_no_self)]\n #![allow(clippy::large_enum_variant)]\n+#![allow(clippy::rc_buffer)]\n+#![allow(clippy::to_string_in_display)]\n \n mod validate;\n "
    }
  ],
  "fix_category": NaN,
  "root_cause_category": NaN,
  "root_cause_subcategory": "!Rust (CI)"
}